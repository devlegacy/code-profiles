"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
const node_os_1 = require("node:os");
const node_path_1 = require("node:path");
const winston_1 = require("winston");
const HOME_DIR = (0, node_os_1.homedir)();
const winstonLogger = (0, winston_1.createLogger)({
    format: winston_1.format.json(),
    defaultMeta: {
        context: "ts-type-expand-plugin",
    },
    transports: [
        new winston_1.transports.File({
            filename: (0, node_path_1.resolve)(HOME_DIR, ".ts-type-expand", "logs", "plugin", "info.log"),
            level: "info",
        }),
        new winston_1.transports.File({
            filename: (0, node_path_1.resolve)(HOME_DIR, ".ts-type-expand", "logs", "plugin", "warn.log"),
            level: "warn",
        }),
        new winston_1.transports.File({
            filename: (0, node_path_1.resolve)(HOME_DIR, ".ts-type-expand", "logs", "plugin", "error.log"),
            level: "error",
        }),
    ],
});
const convertLogObject = (kind, obj) => {
    return Object.assign({ kind }, obj);
};
const ignoreLoggingError = (cb) => {
    try {
        cb();
    }
    catch (err) {
        console.error(err);
    }
};
exports.logger = (() => {
    return {
        info: (kind, obj, message) => {
            ignoreLoggingError(() => {
                winstonLogger.info(Object.assign({ message }, convertLogObject(kind, obj)));
            });
        },
        warn: (kind, obj, message) => {
            ignoreLoggingError(() => {
                winstonLogger.warn(Object.assign({ message }, convertLogObject(kind, obj)));
            });
        },
        error: (kind, obj, message) => {
            ignoreLoggingError(() => {
                winstonLogger.error(Object.assign({ message }, convertLogObject(kind, obj)));
            });
        },
    };
})();
//# sourceMappingURL=logger.js.map