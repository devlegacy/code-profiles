{"version":3,"sources":["../src/errors.ts"],"names":[],"mappings":"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","file":"errors.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { DebugProtocol } from 'vscode-debugprotocol';\n\nimport * as nls from 'vscode-nls';\nconst localize = nls.loadMessageBundle();\n\nexport const evalNotAvailableMsg = localize('eval.not.available', 'not available');\nexport const runtimeNotConnectedMsg = localize('not.connected', 'not connected to runtime');\n\nexport const noRestartFrame = localize('restartFrame.cannot', \"Can't restart frame\");\n\nexport function attributePathNotExist(attribute: string, path: string): DebugProtocol.Message {\n    return {\n        id: 2007,\n        format: localize('attribute.path.not.exist', \"Attribute '{0}' does not exist ('{1}').\", attribute, '{path}'),\n        variables: { path }\n    };\n}\n\n/**\n * Error stating that a relative path should be absolute\n */\nexport function attributePathRelative(attribute: string, path: string): DebugProtocol.Message {\n    return withInfoLink(\n        2008,\n        localize('attribute.path.not.absolute', \"Attribute '{0}' is not absolute ('{1}'); consider adding '{2}' as a prefix to make it absolute.\", attribute, '{path}', '${workspaceFolder}/'),\n        { path },\n        20003\n    );\n}\n\n/**\n * Get error with 'More Information' link.\n */\nexport function withInfoLink(id: number, format: string, variables: any, infoId: number): DebugProtocol.Message {\n    return {\n        id,\n        format,\n        variables,\n        showUser: true,\n        url: 'http://go.microsoft.com/fwlink/?linkID=534832#_' + infoId.toString(),\n        urlLabel: localize('more.information', 'More Information')\n    };\n}\n\nexport function setValueNotSupported(): DebugProtocol.Message {\n    return {\n        id: 2004,\n        format: localize('setVariable.error', 'Setting value not supported')\n    };\n}\n\nexport function errorFromEvaluate(errMsg: string): DebugProtocol.Message {\n    return {\n        id: 2025,\n        format: errMsg\n    };\n}\n\nexport function sourceRequestIllegalHandle(): DebugProtocol.Message {\n    return {\n        id: 2027,\n        format: 'sourceRequest error: illegal handle',\n        sendTelemetry: true\n    };\n}\n\nexport function sourceRequestCouldNotRetrieveContent(): DebugProtocol.Message {\n    return {\n        id: 2026,\n        format: localize('source.not.found', 'Could not retrieve content.')\n    };\n}\n\nexport function pathFormat(): DebugProtocol.Message {\n    return {\n        id: 2018,\n        format: 'debug adapter only supports native paths',\n        sendTelemetry: true\n    };\n}\n\nexport function runtimeConnectionTimeout(timeoutMs: number, errMsg: string): DebugProtocol.Message {\n    return {\n        id: 2010,\n        format: localize('VSND2010', 'Cannot connect to runtime process, timeout after {0} ms - (reason: {1}).', '{_timeout}', '{_error}'),\n        variables: { _error: errMsg, _timeout: timeoutMs + '' }\n    };\n}\n\nexport function stackFrameNotValid(): DebugProtocol.Message {\n    return {\n        id: 2020,\n        format: 'stack frame not valid',\n        sendTelemetry: true\n    };\n}\n\nexport function noCallStackAvailable(): DebugProtocol.Message {\n    return {\n        id: 2023,\n        format: localize('VSND2023', 'No call stack available.')\n    };\n}\n\nexport function invalidThread(threadId: number): DebugProtocol.Message {\n    return {\n        id: 2030,\n        format: 'Invalid thread {_thread}',\n        variables: { _thread: threadId + '' },\n        sendTelemetry: true\n    };\n}\n\nexport function exceptionInfoRequestError(): DebugProtocol.Message {\n    return {\n        id: 2031,\n        format: 'exceptionInfoRequest error',\n        sendTelemetry: true\n    };\n}\n\nexport function noStoredException(): DebugProtocol.Message {\n    return {\n        id: 2032,\n        format: 'exceptionInfoRequest error: no stored exception',\n        sendTelemetry: true\n    };\n}\n"]}