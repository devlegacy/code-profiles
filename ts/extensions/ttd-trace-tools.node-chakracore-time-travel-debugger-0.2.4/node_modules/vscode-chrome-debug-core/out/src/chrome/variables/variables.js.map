{"version":3,"sources":["../src/chrome/variables/variables.ts"],"names":[],"mappings":";AAAA;;4DAE4D;;AAE5D,8CAA8C;AAE9C,kDAAkD;AAElD,qCAAqC;AACrC,uCAAuC;AAEvC,6DAAsD;AAEtD,6DAAqH;AAOrH;IAGI,YAAoB,WAA4B;QAA5B,gBAAW,GAAX,WAAW,CAAiB;QAC5C,IAAI,CAAC,gBAAgB,GAAG,IAAI,eAAe,EAAE,CAAC;IAClD,CAAC;IAED,IAAW,MAAM;QACb,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAEM,QAAQ;QACX,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;IACrC,CAAC;IAEM,mCAAmC,CAAC,IAAiC;QACxE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC/B,IAAI,2CAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,EACtC,MAAM,CAAC,CAAC;IAChB,CAAC;IAEM,4BAA4B,CAAC,OAAe,EAAE,cAAsB,EAAE,QAAgB,EAAE,OAAmC,EAAE,WAAuC;QACvK,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC/B,IAAI,mCAAc,CAAC,IAAI,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;IAC3F,CAAC;IAIM,sBAAsB,CAAC,IAAY,EAAE,MAAiC,EAAE,OAAwB,EAAE,kBAA2B;QAChI,IAAI,KAAa,CAAC;QAClB,MAAM,aAAa,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,CAAC,CAAC;YACrB,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,GAAG,OAAO,CAAC;QACrE,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,aAAa,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACvD,KAAK,GAAG,aAAa,IAAI,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;gBAC3D,MAAM,CAAC,WAAW,CAAC;QAC3B,CAAC;QAED,MAAM,YAAY,GAAG,WAAW,CAAC,eAAe,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QAC3E,MAAM,CAAyB;YAC3B,IAAI;YACJ,KAAK;YACL,IAAI,EAAE,KAAK,CAAC,oBAAoB,CAAC,MAAM,CAAC,IAAI,CAAC;YAC7C,kBAAkB,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,sCAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,OAAO,CAAC;YACrH,YAAY;SACf,CAAC;IACN,CAAC;IAEM,sBAAsB,CAAC,IAAY,EAAE,MAAiC,EAAE,kBAA2B,EAAE,SAAS,GAAG,IAAI,EAAE,UAA2B,WAAW;QAChK,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC;QAEpB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACT,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,MAAM,EAAE,kBAAkB,EAAE,OAAO,CAAC,CAAC;YAChF,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC;gBACpC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,kBAAkB,CAAC,CAAC,CAAC;YACnG,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,MAAM,EAAE,kBAAkB,EAAE,SAAS,CAAC,CAAC,CAAC;YACtG,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,IAAI,EAAE,EAAE,EAAE,kBAAkB,CAAC,CAAC,CAAC;QAChG,CAAC;IACL,CAAC;IAEM,oBAAoB,CAAC,IAAY,EAAE,MAAiC,EAAE,kBAA0B,EAAE,OAAwB;QAC7H,EAAE,CAAC,CAAU,MAAM,CAAC,OAAQ,KAAK,mBAAmB,CAAC,CAAC,CAAC;YACnD,2CAA2C;YAC3C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,IAAI,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,CAAC,CAAC;QACjH,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,IAAI,EAAE,MAAM,EAAE,kBAAkB,CAAC,CAAC,CAAC;QACpG,CAAC;QAED,MAAM,KAAK,GAAG,WAAW,CAAC,6BAA6B,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACzE,IAAI,UAA+B,CAAC;QACpC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,OAAO,IAAI,MAAM,CAAC,OAAO,KAAK,YAAY,CAAC,CAAC,CAAC;YAChE,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC7C,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC,CAAC;YACzE,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACvC,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC/D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,UAAU,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC9D,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,KAAK,IAAI,MAAM,CAAC,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC;YAC9D,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC7C,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,UAAU,GAAG,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACnE,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC;gBACzB,gBAAgB,EAAE,SAAS;gBAC3B,cAAc,EAAE,SAAS;aAC5B,CAAC,CAAC;QACP,CAAC;QAED,MAAM,YAAY,GAAG,WAAW,CAAC,eAAe,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QAC3E,MAAM,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,YAAY,CAAC,EAAE,OAAO,CAAC,CAAC;QACrH,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,gBAAgB,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC,CAAyB;YACtF,IAAI;YACJ,KAAK;YACL,IAAI,EAAE,KAAK,CAAC,oBAAoB,CAAC,MAAM,CAAC,IAAI,CAAC;YAC7C,kBAAkB;YAClB,gBAAgB;YAChB,cAAc;YACd,YAAY;SACd,CAAA,CAAC,CAAC;IACR,CAAC;IAES,uBAAuB,CAAC,MAAiC,EAAE,YAAoB;QACrF,MAAM,CAAC,IAAI,sCAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACtE,CAAC;IAEM,gCAAgC,CAAC,IAAY,EAAE,KAAa,EAAE,kBAA2B;QAC5F,MAAM,CAAC;YACH,IAAI;YACJ,KAAK;YACL,kBAAkB,EAAE,CAAC;YACrB,YAAY,EAAE,WAAW,CAAC,eAAe,CAAC,kBAAkB,EAAE,IAAI,CAAC;SACtE,CAAC;IACN,CAAC;IAEM,uBAAuB,CAAC,IAAY,EAAE,MAAiC,EAAE,kBAA2B,EAAE,SAAmB;QAC5H,MAAM,KAAK,GAAG,WAAW,CAAC,gCAAgC,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAC9E,MAAM,QAAQ,GAAG,IAAI,CAAC,gCAAgC,CAAC,IAAI,EAAE,KAAK,EAAE,kBAAkB,CAAC,CAAC;QACxF,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QAE5B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAEM,4BAA4B,CAAC,QAAyC,EAAE,cAAuB,EAAE,kBAA2B;QAC/H,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YACf,SAAS;YACT,MAAM,eAAe,GAAG,8DAA8D,CAAC;YACvF,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC;gBACtC,QAAQ,EAAE,cAAc;gBACxB,mBAAmB,EAAE,eAAe;gBACpC,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC;aACxC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACf,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBAC5B,wEAAwE;oBACxE,MAAM,gBAAgB,GAAG,WAAW,CAAC,gCAAgC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;oBACjG,4BAAM,CAAC,OAAO,CAAC,uCAAuC,GAAG,gBAAgB,CAAC,CAAC;oBAC3E,MAAM,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,CAAC,EAAE,CAAC;gBACnF,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;gBAC3F,CAAC;YACL,CAAC,EACG,KAAK,CAAC,EAAE;gBACJ,4BAAM,CAAC,KAAK,CAAC,4BAA4B,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC9D,MAAM,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,kBAAkB,EAAE,CAAC,EAAE,CAAC;YACnF,CAAC,CAAC,CAAC;QACX,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YACtB,oCAAoC;YACpC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,kBAAkB,EAAE,CAAC,EAAE,CAAC,CAAC;QAC5F,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,oBAAoB;YACpB,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QACnF,CAAC;IACL,CAAC;IAEM,uBAAuB,CAAC,QAAgB,EAAE,YAAqB,EAAE,MAAe,EAAE,KAAc,EAAE,KAAc;QACnH,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,QAAQ,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAC5F,CAAC;QAED,MAAM,GAAG,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;QAE/C,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;YACf,kDAAkD;YAClD,IAAI,CAAC,oBAAoB,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,KAAK,EAAE,sBAAsB,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;YAClH,IAAI,CAAC,oBAAoB,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE,sBAAsB,EAAE,KAAK,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;SACrH,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE;YACxB,wEAAwE;YACxE,MAAM,WAAW,GAAG,IAAI,GAAG,EAA2C,CAAC;YACvE,MAAM,mBAAmB,GAAG,IAAI,GAAG,EAAmD,CAAC;YACvF,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBACjC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACX,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAC/B,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;oBAE9C,EAAE,CAAC,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBAC9B,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;4BAC/C,mBAAmB,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;wBAC7D,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,wDAAwD;YACxD,MAAM,IAAI,GAAsC,EAAE,CAAC;YACnD,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC3B,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3G,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,QAAQ,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;gBACnF,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,mBAAmB,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;gBACvC,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC/G,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,oCAAoC,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;gBACtG,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAChB,8BAA8B;YAC9B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,gBAAgB,CAAC,WAAmB,EAAE,WAAmB,EAAE,YAAoB,EAAE,KAAa;QACjG,IAAI,gBAA2C,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;YAClH,EAAE,CAAC,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAChC,MAAM,MAAM,GAAG,WAAW,CAAC,gCAAgC,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;gBAC3F,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,gBAAgB,GAAG,YAAY,CAAC,MAAM,CAAC;gBACvC,MAAM,QAAQ,GAAG,WAAW,CAAC,0BAA0B,CAAC,gBAAgB,CAAC,CAAC;gBAC1E,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAC;YACvG,CAAC;QACL,CAAC,EACD,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;aAEhE,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,WAAW,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC;IACrF,CAAC;IAEO,oBAAoB,CAAC,MAAyC;QAClE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC;aAC3C,KAAK,CAAC,GAAG,CAAC,EAAE;YACT,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,uCAAuC,CAAC,CAAC,CAAC,CAAC;gBAClE,wIAAwI;gBACxI,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,GAAG,CAAC;YACd,CAAC;QACL,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,6BAA6B,CAAC,QAAgB,EAAE,YAAoB,EAAE,MAAc,EAAE,KAAa,EAAE,KAAa;QACtH,4CAA4C;QAC5C,MAAM,qBAAqB,GAAG;;;;;cAKxB,CAAC;QACP,eAAe;QACf,MAAM,mBAAmB,GAAG;;;;;;cAMtB,CAAC;QAEP,MAAM,SAAS,GAAG,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,mBAAmB,CAAC;QACrF,MAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACzG,CAAC;IAEO,+BAA+B,CAAC,QAAgB,EAAE,YAAoB,EAAE,SAAiB,EAAE,MAAc,EAAE,KAAa,EAAE,KAAa;QAC3I,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC;YACtC,QAAQ;YACR,mBAAmB,EAAE,SAAS;YAC9B,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;YAC/C,MAAM,EAAE,IAAI;SACf,CAAC,CAAC,IAAI,CAA2B,YAAY,CAAC,EAAE;YAC7C,EAAE,CAAC,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAChC,MAAM,MAAM,GAAG,WAAW,CAAC,gCAAgC,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;gBAC3F,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,mGAAmG;gBACnG,yCAAyC;gBACzC,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,EAAE,MAAM,CAAC;qBAClF,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7F,CAAC;QACL,CAAC,EACD,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC;IAEO,oCAAoC,CAAC,QAAiD,EAAE,kBAA0B;QACtH,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;IAC1F,CAAC;IAEO,sBAAsB,CAAC,QAAgB;QAC3C,8BAA8B;QAC9B,MAAM,aAAa,GAAG,kFAAkF,CAAC;QACzG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC3D,CAAC;IAEO,uBAAuB,CAAC,QAAgB;QAC5C,8BAA8B;QAC9B,uDAAuD;QACvD,MAAM,aAAa,GAAG,yCAAyC,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC3D,CAAC;IAEO,yBAAyB,CAAC,MAAiC;QAC/D,IAAI,gBAAgB,GAAG,CAAC,CAAC;QACzB,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU;aACzC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACtB,sCAAsC;YACtC,gBAAgB,GAAG,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;QACpF,CAAC;QAED,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,6BAA6B;QAChH,MAAM,CAAC,EAAE,gBAAgB,EAAE,cAAc,EAAE,CAAC;IAChD,CAAC;IAEO,2BAA2B,CAAC,QAAgB;QAChD,MAAM,aAAa,GAAG,0DAA0D,CAAC,CAAC,sBAAsB;QACxG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC3D,CAAC;IAEO,8BAA8B,CAAC,MAAiC;QACpE,IAAI,gBAAgB,GAAG,CAAC,CAAC;QACzB,IAAI,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,sBAAsB;QAEjF,MAAM,CAAC,EAAE,gBAAgB,EAAE,cAAc,EAAE,CAAC;IAChD,CAAC;IAEO,iBAAiB,CAAC,QAAgB,EAAE,aAAqB;QAC7D,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC;YAC1D,QAAQ;YACR,mBAAmB,EAAE,aAAa;YAClC,MAAM,EAAE,IAAI;YACZ,aAAa,EAAE,IAAI;SACtB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACf,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC5B,MAAM,MAAM,GAAG,WAAW,CAAC,gCAAgC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;gBACvF,MAAM,CAAC,OAAO,CAAC,MAAM,CAAa,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;YACxE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;gBAC1C,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC3B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAa,MAAM,CAAC,iBAAiB,CAAC,kCAAkC,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAClI,CAAC;gBAED,MAAM,CAAC,EAAE,gBAAgB,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;YAChF,CAAC;QACL,CAAC,EACD,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAa,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;CACJ;AAxVD,4CAwVC;AAED;IAAA;QACY,qBAAgB,GAAG,IAAI,6BAAO,CAAqB,CAAC,CAAC,CAAC;QACtD,4BAAuB,GAAG,IAAI,6BAAO,CAAqB,GAAG,CAAC,CAAC;IAoB3E,CAAC;IAlBU,QAAQ;QACX,qEAAqE;QACrE,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC;IAEM,MAAM,CAAC,KAAyB,EAAE,UAA2B,WAAW;QAC3E,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAEM,GAAG,CAAC,MAAc;QACrB,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACzF,CAAC;IAEO,UAAU,CAAC,OAAwB;QACvC,MAAM,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC;YACvB,IAAI,CAAC,uBAAuB,CAAC,CAAC;YAC9B,IAAI,CAAC,gBAAgB,CAAC;IAC9B,CAAC;CACJ;AAtBD,0CAsBC","file":"variables.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as chromeUtils from '../chromeUtils';\nimport Crdp from '../../../crdp/crdp';\nimport * as varPreviews from './variablePreviews';\nimport { ChromeDebugAdapter, VariableContext } from '../chromeDebugAdapter';\nimport * as utils from '../../utils';\nimport * as errors from '../../errors';\n\nimport { Handles, logger } from 'vscode-debugadapter';\nimport { DebugProtocol } from 'vscode-debugprotocol';\nimport { IVariableContainer, PropertyContainer, LoggedObjectsContainer, ScopeContainer } from './variableContainers';\n\nexport interface IPropCount {\n    indexedVariables: number;\n    namedVariables: number;\n}\n\nexport class VariablesService {\n    private _variableHandles: VariableHandles;\n\n    constructor(private _crdpClient: Crdp.CrdpClient) {\n        this._variableHandles = new VariableHandles();\n    }\n\n    public get chrome(): Crdp.CrdpClient {\n        return this._crdpClient;\n    }\n\n    public onPaused(): void {\n        this._variableHandles.onPaused();\n    }\n\n    public createLoggedObjectVariableReference(objs: Crdp.Runtime.RemoteObject[]): number {\n        return this._variableHandles.create(\n            new LoggedObjectsContainer(this, objs),\n            'repl');\n    }\n\n    public createScopeVariableReference(frameId: string, origScopeIndex: number, objectId: string, thisObj?: Crdp.Runtime.RemoteObject, returnValue?: Crdp.Runtime.RemoteObject): number {\n        return this._variableHandles.create(\n            new ScopeContainer(this, frameId, origScopeIndex, objectId, thisObj, returnValue));\n    }\n\n    public createExceptionVariableReference(exception: Crdp.Runtime.RemoteObject)\n\n    public createFunctionVariable(name: string, object: Crdp.Runtime.RemoteObject, context: VariableContext, parentEvaluateName?: string): DebugProtocol.Variable {\n        let value: string;\n        const firstBraceIdx = object.description.indexOf('{');\n        if (firstBraceIdx >= 0) {\n            value = object.description.substring(0, firstBraceIdx) + '{ … }';\n        } else {\n            const firstArrowIdx = object.description.indexOf('=>');\n            value = firstArrowIdx >= 0 ?\n                object.description.substring(0, firstArrowIdx + 2) + ' …' :\n                object.description;\n        }\n\n        const evaluateName = chromeUtils.getEvaluateName(parentEvaluateName, name);\n        return <DebugProtocol.Variable>{\n            name,\n            value,\n            type: utils.uppercaseFirstLetter(object.type),\n            variablesReference: this._variableHandles.create(new PropertyContainer(this, object.objectId, evaluateName), context),\n            evaluateName\n        };\n    }\n\n    public remoteObjectToVariable(name: string, object: Crdp.Runtime.RemoteObject, parentEvaluateName?: string, stringify = true, context: VariableContext = 'variables'): Promise<DebugProtocol.Variable> {\n        name = name || '\"\"';\n\n        if (object) {\n            if (object.type === 'object') {\n                return this.createObjectVariable(name, object, parentEvaluateName, context);\n            } else if (object.type === 'function') {\n                return Promise.resolve(this.createFunctionVariable(name, object, context, parentEvaluateName));\n            } else {\n                return Promise.resolve(this.createPrimitiveVariable(name, object, parentEvaluateName, stringify));\n            }\n        } else {\n            return Promise.resolve(this.createPrimitiveVariableWithValue(name, '', parentEvaluateName));\n        }\n    }\n\n    public createObjectVariable(name: string, object: Crdp.Runtime.RemoteObject, parentEvaluateName: string, context: VariableContext): Promise<DebugProtocol.Variable> {\n        if ((<string>object.subtype) === 'internal#location') {\n            // Could format this nicely later, see #110\n            return Promise.resolve(this.createPrimitiveVariableWithValue(name, 'internal#location', parentEvaluateName));\n        } else if (object.subtype === 'null') {\n            return Promise.resolve(this.createPrimitiveVariableWithValue(name, 'null', parentEvaluateName));\n        }\n\n        const value = varPreviews.getRemoteObjectPreview_object(object, context);\n        let propCountP: Promise<IPropCount>;\n        if (object.subtype === 'array' || object.subtype === 'typedarray') {\n            if (object.preview && !object.preview.overflow) {\n                propCountP = Promise.resolve(this.getArrayNumPropsByPreview(object));\n            } else if (object.className === 'Buffer') {\n                propCountP = this.getBufferNumPropsByEval(object.objectId);\n            } else {\n                propCountP = this.getArrayNumPropsByEval(object.objectId);\n            }\n        } else if (object.subtype === 'set' || object.subtype === 'map') {\n            if (object.preview && !object.preview.overflow) {\n                propCountP = Promise.resolve(this.getCollectionNumPropsByPreview(object));\n            } else {\n                propCountP = this.getCollectionNumPropsByEval(object.objectId);\n            }\n        } else {\n            propCountP = Promise.resolve({\n                indexedVariables: undefined,\n                namedVariables: undefined\n            });\n        }\n\n        const evaluateName = chromeUtils.getEvaluateName(parentEvaluateName, name);\n        const variablesReference = this._variableHandles.create(this.createPropertyContainer(object, evaluateName), context);\n        return propCountP.then(({ indexedVariables, namedVariables }) => (<DebugProtocol.Variable>{\n            name,\n            value,\n            type: utils.uppercaseFirstLetter(object.type),\n            variablesReference,\n            indexedVariables,\n            namedVariables,\n            evaluateName\n        }));\n    }\n\n    protected createPropertyContainer(object: Crdp.Runtime.RemoteObject, evaluateName: string): IVariableContainer {\n        return new PropertyContainer(this, object.objectId, evaluateName);\n    }\n\n    public createPrimitiveVariableWithValue(name: string, value: string, parentEvaluateName?: string): DebugProtocol.Variable {\n        return {\n            name,\n            value,\n            variablesReference: 0,\n            evaluateName: chromeUtils.getEvaluateName(parentEvaluateName, name)\n        };\n    }\n\n    public createPrimitiveVariable(name: string, object: Crdp.Runtime.RemoteObject, parentEvaluateName?: string, stringify?: boolean): DebugProtocol.Variable {\n        const value = varPreviews.getRemoteObjectPreview_primitive(object, stringify);\n        const variable = this.createPrimitiveVariableWithValue(name, value, parentEvaluateName);\n        variable.type = object.type;\n\n        return variable;\n    }\n\n    public propertyDescriptorToVariable(propDesc: Crdp.Runtime.PropertyDescriptor, owningObjectId?: string, parentEvaluateName?: string): Promise<DebugProtocol.Variable> {\n        if (propDesc.get) {\n            // Getter\n            const grabGetterValue = 'function remoteFunction(propName) { return this[propName]; }';\n            return this.chrome.Runtime.callFunctionOn({\n                objectId: owningObjectId,\n                functionDeclaration: grabGetterValue,\n                arguments: [{ value: propDesc.name }]\n            }).then(response => {\n                if (response.exceptionDetails) {\n                    // Not an error, getter could be `get foo() { throw new Error('bar'); }`\n                    const exceptionMessage = chromeUtils.errorMessageFromExceptionDetails(response.exceptionDetails);\n                    logger.verbose('Exception thrown evaluating getter - ' + exceptionMessage);\n                    return { name: propDesc.name, value: exceptionMessage, variablesReference: 0 };\n                } else {\n                    return this.remoteObjectToVariable(propDesc.name, response.result, parentEvaluateName);\n                }\n            },\n                error => {\n                    logger.error('Error evaluating getter - ' + error.toString());\n                    return { name: propDesc.name, value: error.toString(), variablesReference: 0 };\n                });\n        } else if (propDesc.set) {\n            // setter without a getter, unlikely\n            return Promise.resolve({ name: propDesc.name, value: 'setter', variablesReference: 0 });\n        } else {\n            // Non getter/setter\n            return this.internalPropertyDescriptorToVariable(propDesc, parentEvaluateName);\n        }\n    }\n\n    public getVariablesForObjectId(objectId: string, evaluateName?: string, filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]> {\n        if (typeof start === 'number' && typeof count === 'number') {\n            return this.getFilteredVariablesForObject(objectId, evaluateName, filter, start, count);\n        }\n\n        filter = filter === 'indexed' ? 'all' : filter;\n\n        return Promise.all([\n            // Need to make two requests to get all properties\n            this.getRuntimeProperties({ objectId, ownProperties: false, accessorPropertiesOnly: true, generatePreview: true }),\n            this.getRuntimeProperties({ objectId, ownProperties: true, accessorPropertiesOnly: false, generatePreview: true })\n        ]).then(getPropsResponses => {\n            // Sometimes duplicates will be returned - merge all descriptors by name\n            const propsByName = new Map<string, Crdp.Runtime.PropertyDescriptor>();\n            const internalPropsByName = new Map<string, Crdp.Runtime.InternalPropertyDescriptor>();\n            getPropsResponses.forEach(response => {\n                if (response) {\n                    response.result.forEach(propDesc =>\n                        propsByName.set(propDesc.name, propDesc));\n\n                    if (response.internalProperties) {\n                        response.internalProperties.forEach(internalProp => {\n                            internalPropsByName.set(internalProp.name, internalProp);\n                        });\n                    }\n                }\n            });\n\n            // Convert Chrome prop descriptors to DebugProtocol vars\n            const vars: Promise<DebugProtocol.Variable>[] = [];\n            propsByName.forEach(propDesc => {\n                if (!filter || filter === 'all' || (varPreviews.isIndexedPropName(propDesc.name) === (filter === 'indexed'))) {\n                    vars.push(this.propertyDescriptorToVariable(propDesc, objectId, evaluateName));\n                }\n            });\n\n            internalPropsByName.forEach(internalProp => {\n                if (!filter || filter === 'all' || (varPreviews.isIndexedPropName(internalProp.name) === (filter === 'indexed'))) {\n                    vars.push(Promise.resolve(this.internalPropertyDescriptorToVariable(internalProp, evaluateName)));\n                }\n            });\n\n            return Promise.all(vars);\n        }).then(variables => {\n            // Sort all variables properly\n            return variables.sort((var1, var2) => chromeUtils.compareVariableNames(var1.name, var2.name));\n        });\n    }\n\n    public setVariableValue(callFrameId: string, scopeNumber: number, variableName: string, value: string): Promise<string> {\n        let evalResultObject: Crdp.Runtime.RemoteObject;\n        return this.chrome.Debugger.evaluateOnCallFrame({ callFrameId, expression: value, silent: true }).then(evalResponse => {\n            if (evalResponse.exceptionDetails) {\n                const errMsg = chromeUtils.errorMessageFromExceptionDetails(evalResponse.exceptionDetails);\n                return Promise.reject(errors.errorFromEvaluate(errMsg));\n            } else {\n                evalResultObject = evalResponse.result;\n                const newValue = chromeUtils.remoteObjectToCallArgument(evalResultObject);\n                return this.chrome.Debugger.setVariableValue({ callFrameId, scopeNumber, variableName, newValue });\n            }\n        },\n        error => Promise.reject(errors.errorFromEvaluate(error.message)))\n        // Temporary, Microsoft/vscode#12019\n        .then(setVarResponse => chromeUtils.remoteObjectToValue(evalResultObject).value);\n    }\n\n    private getRuntimeProperties(params: Crdp.Runtime.GetPropertiesRequest): Promise<Crdp.Runtime.GetPropertiesResponse> {\n        return this.chrome.Runtime.getProperties(params)\n            .catch(err => {\n                if (err.message.startsWith('Cannot find context with specified id')) {\n                    // Hack to ignore this error until we fix https://github.com/Microsoft/vscode/issues/18001 to not request variables at unexpected times.\n                    return null;\n                } else {\n                    throw err;\n                }\n            });\n    }\n\n    private getFilteredVariablesForObject(objectId: string, evaluateName: string, filter: string, start: number, count: number): Promise<DebugProtocol.Variable[]> {\n        // No ES6, in case we talk to an old runtime\n        const getIndexedVariablesFn = `\n            function getIndexedVariables(start, count) {\n                var result = [];\n                for (var i = start; i < (start + count); i++) result[i] = this[i];\n                return result;\n            }`;\n        // TODO order??\n        const getNamedVariablesFn = `\n            function getNamedVariablesFn(start, count) {\n                var result = [];\n                var ownProps = Object.getOwnPropertyNames(this);\n                for (var i = start; i < (start + count); i++) result[i] = ownProps[i];\n                return result;\n            }`;\n\n        const getVarsFn = filter === 'indexed' ? getIndexedVariablesFn : getNamedVariablesFn;\n        return this.getFilteredVariablesForObjectId(objectId, evaluateName, getVarsFn, filter, start, count);\n    }\n\n    private getFilteredVariablesForObjectId(objectId: string, evaluateName: string, getVarsFn: string, filter: string, start: number, count: number): Promise<DebugProtocol.Variable[]> {\n        return this.chrome.Runtime.callFunctionOn({\n            objectId,\n            functionDeclaration: getVarsFn,\n            arguments: [{ value: start }, { value: count }],\n            silent: true\n        }).then<DebugProtocol.Variable[]>(evalResponse => {\n            if (evalResponse.exceptionDetails) {\n                const errMsg = chromeUtils.errorMessageFromExceptionDetails(evalResponse.exceptionDetails);\n                return Promise.reject(errors.errorFromEvaluate(errMsg));\n            } else {\n                // The eval was successful and returned a reference to the array object. Get the props, then filter\n                // out everything except the index names.\n                return this.getVariablesForObjectId(evalResponse.result.objectId, evaluateName, filter)\n                    .then(vars => vars.filter(variable => varPreviews.isIndexedPropName(variable.name)));\n            }\n        },\n        error => Promise.reject(errors.errorFromEvaluate(error.message)));\n    }\n\n    private internalPropertyDescriptorToVariable(propDesc: Crdp.Runtime.InternalPropertyDescriptor, parentEvaluateName: string): Promise<DebugProtocol.Variable> {\n        return this.remoteObjectToVariable(propDesc.name, propDesc.value, parentEvaluateName);\n    }\n\n    private getArrayNumPropsByEval(objectId: string): Promise<IPropCount> {\n        // +2 for __proto__ and length\n        const getNumPropsFn = `function() { return [this.length, Object.keys(this).length - this.length + 2]; }`;\n        return this.getNumPropsByEval(objectId, getNumPropsFn);\n    }\n\n    private getBufferNumPropsByEval(objectId: string): Promise<IPropCount> {\n        // +2 for __proto__ and length\n        // Object.keys doesn't return other props from a Buffer\n        const getNumPropsFn = `function() { return [this.length, 0]; }`;\n        return this.getNumPropsByEval(objectId, getNumPropsFn);\n    }\n\n    private getArrayNumPropsByPreview(object: Crdp.Runtime.RemoteObject): IPropCount {\n        let indexedVariables = 0;\n        const indexedProps = object.preview.properties\n            .filter(prop => varPreviews.isIndexedPropName(prop.name));\n        if (indexedProps.length) {\n            // +1 because (last index=0) => 1 prop\n            indexedVariables = parseInt(indexedProps[indexedProps.length - 1].name, 10) + 1;\n        }\n\n        const namedVariables = object.preview.properties.length - indexedProps.length + 2; // 2 for __proto__ and length\n        return { indexedVariables, namedVariables };\n    }\n\n    private getCollectionNumPropsByEval(objectId: string): Promise<IPropCount> {\n        const getNumPropsFn = `function() { return [0, Object.keys(this).length + 1]; }`; // +1 for [[Entries]];\n        return this.getNumPropsByEval(objectId, getNumPropsFn);\n    }\n\n    private getCollectionNumPropsByPreview(object: Crdp.Runtime.RemoteObject): IPropCount {\n        let indexedVariables = 0;\n        let namedVariables = object.preview.properties.length + 1; // +1 for [[Entries]];\n\n        return { indexedVariables, namedVariables };\n    }\n\n    private getNumPropsByEval(objectId: string, getNumPropsFn: string): Promise<IPropCount> {\n        return this._chromeDebugAdapter.chrome.Runtime.callFunctionOn({\n            objectId,\n            functionDeclaration: getNumPropsFn,\n            silent: true,\n            returnByValue: true\n        }).then(response => {\n            if (response.exceptionDetails) {\n                const errMsg = chromeUtils.errorMessageFromExceptionDetails(response.exceptionDetails);\n                return Promise.reject<IPropCount>(errors.errorFromEvaluate(errMsg));\n            } else {\n                const resultProps = response.result.value;\n                if (resultProps.length !== 2) {\n                    return Promise.reject<IPropCount>(errors.errorFromEvaluate(\"Did not get expected props, got \" + JSON.stringify(resultProps)));\n                }\n\n                return { indexedVariables: resultProps[0], namedVariables: resultProps[1] };\n            }\n        },\n        error => Promise.reject<IPropCount>(errors.errorFromEvaluate(error.message)));\n    }\n}\n\nexport class VariableHandles {\n    private _variableHandles = new Handles<IVariableContainer>(1);\n    private _consoleVariableHandles = new Handles<IVariableContainer>(1e5);\n\n    public onPaused(): void {\n        // Only reset the variableHandles, the console vars are still visible\n        this._variableHandles.reset();\n    }\n\n    public create(value: IVariableContainer, context: VariableContext = 'variables'): number {\n        return this.getHandles(context).create(value);\n    }\n\n    public get(handle: number): IVariableContainer {\n        return this._variableHandles.get(handle) || this._consoleVariableHandles.get(handle);\n    }\n\n    private getHandles(context: VariableContext): Handles<IVariableContainer> {\n        return context === 'repl' ?\n            this._consoleVariableHandles :\n            this._variableHandles;\n    }\n}\n"],"sourceRoot":"../../.."}