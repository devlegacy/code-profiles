{"version":3,"sources":["../src/chrome/internalSourceBreakpoint.ts"],"names":[],"mappings":";AAAA;;4DAE4D;;AAI5D;IAMI,YAAY,UAA0C;QAClD,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;QAE5C,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,SAAS,GAAG,sBAAsB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAC/D,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,SAAS,GAAG,IAAI,UAAU,CAAC,SAAS,QAAQ,IAAI,CAAC,SAAS,EAAE,CAAC;YACtE,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;QAC1C,CAAC;IACL,CAAC;CACJ;AApBD,4DAoBC;AAED,MAAM,0BAA0B,GAAG,UAAU,CAAC;AAE9C,gCAAgC,GAAG;IAC/B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAE7B,IAAI,IAAI,GAAa,EAAE,CAAC;IACxB,IAAI,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,0BAA0B,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QAClE,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QACvB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAEtC,MAAM,CAAC,gBAAgB,MAAM,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AAC1D,CAAC","file":"internalSourceBreakpoint.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { DebugProtocol } from 'vscode-debugprotocol';\n\nexport class InternalSourceBreakpoint {\n    readonly line: number;\n    readonly column?: number;\n    readonly condition?: string;\n    readonly hitCondition?: string;\n\n    constructor(breakpoint: DebugProtocol.SourceBreakpoint) {\n        this.line = breakpoint.line;\n        this.column = breakpoint.column;\n        this.hitCondition = breakpoint.hitCondition;\n\n        if (breakpoint.logMessage) {\n            this.condition = logMessageToExpression(breakpoint.logMessage);\n            if (breakpoint.condition) {\n                this.condition = `(${breakpoint.condition}) && ${this.condition}`;\n            }\n        } else if (breakpoint.condition) {\n            this.condition = breakpoint.condition;\n        }\n    }\n}\n\nconst LOGMESSAGE_VARIABLE_REGEXP = /{(.*?)}/g;\n\nfunction logMessageToExpression(msg) {\n    msg = msg.replace('%', '%%');\n\n    let args: string[] = [];\n    let format = msg.replace(LOGMESSAGE_VARIABLE_REGEXP, (match, group) => {\n        const a = group.trim();\n        if (a) {\n            args.push(`(${a})`);\n            return '%s';\n        } else {\n            return '';\n        }\n    });\n\n    format = format.replace('\\'', '\\\\\\'');\n\n    return `console.log('${format}', ${args.join(', ')})`;\n}\n"],"sourceRoot":"../.."}