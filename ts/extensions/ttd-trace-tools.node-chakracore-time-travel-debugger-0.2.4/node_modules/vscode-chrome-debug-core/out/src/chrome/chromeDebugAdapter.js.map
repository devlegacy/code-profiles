{"version":3,"sources":["../src/chrome/chromeDebugAdapter.ts"],"names":[],"mappings":"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","file":"chromeDebugAdapter.js","sourceRoot":"../..","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { DebugProtocol } from 'vscode-debugprotocol';\nimport { InitializedEvent, TerminatedEvent, Handles, ContinuedEvent, BreakpointEvent, OutputEvent, Logger, logger, LoadedSourceEvent } from 'vscode-debugadapter';\n\nimport { ICommonRequestArgs, ILaunchRequestArgs, ISetBreakpointsArgs, ISetBreakpointsResponseBody, IStackTraceResponseBody,\n    IAttachRequestArgs, IScopesResponseBody, IVariablesResponseBody,\n    ISourceResponseBody, IThreadsResponseBody, IEvaluateResponseBody, ISetVariableResponseBody, IDebugAdapter,\n    ICompletionsResponseBody, IToggleSkipFileStatusArgs, IInternalStackTraceResponseBody, IGetLoadedSourcesResponseBody,\n    IExceptionInfoResponseBody, ISetBreakpointResult, TimeTravelRuntime, IRestartRequestArgs, IInitializeRequestArgs, ITelemetryPropertyCollector } from '../debugAdapterInterfaces';\nimport { IChromeDebugAdapterOpts, ChromeDebugSession } from './chromeDebugSession';\nimport { ChromeConnection } from './chromeConnection';\nimport * as ChromeUtils from './chromeUtils';\nimport Crdp from '../../crdp/crdp';\nimport { PropertyContainer, ScopeContainer, ExceptionContainer, isIndexedPropName, IVariableContainer } from './variables';\nimport * as variables from './variables';\nimport { formatConsoleArguments, formatExceptionDetails } from './consoleHelper';\nimport { StoppedEvent2, ReasonType } from './stoppedEvent';\nimport { InternalSourceBreakpoint } from './internalSourceBreakpoint';\n\nimport * as errors from '../errors';\nimport * as utils from '../utils';\nimport { PromiseDefer, promiseDefer } from '../utils';\nimport { telemetry, BatchTelemetryReporter, IExecutionResultTelemetryProperties } from '../telemetry';\nimport { StepProgressEventsEmitter } from '../executionTimingsReporter';\n\nimport { LineColTransformer } from '../transformers/lineNumberTransformer';\nimport { BasePathTransformer } from '../transformers/basePathTransformer';\nimport { RemotePathTransformer } from '../transformers/remotePathTransformer';\nimport { BaseSourceMapTransformer } from '../transformers/baseSourceMapTransformer';\nimport { EagerSourceMapTransformer } from '../transformers/eagerSourceMapTransformer';\nimport { FallbackToClientPathTransformer } from '../transformers/fallbackToClientPathTransformer';\nimport { BreakOnLoadHelper } from './breakOnLoadHelper';\n\nimport * as path from 'path';\n\nimport * as nls from 'vscode-nls';\nlet localize = nls.loadMessageBundle();\n\ninterface IPropCount {\n    indexedVariables: number;\n    namedVariables: number;\n}\n\n/**\n * Represents a reference to a source/script. `contents` is set if there are inlined sources.\n * Otherwise, scriptId can be used to retrieve the contents from the runtime.\n */\nexport interface ISourceContainer {\n    /** The runtime-side scriptId of this script */\n    scriptId?: Crdp.Runtime.ScriptId;\n    /** The contents of this script, if they are inlined in the sourcemap */\n    contents?: string;\n    /** The authored path to this script (only set if the contents are inlined) */\n    mappedPath?: string;\n}\n\nexport interface IPendingBreakpoint {\n    args: ISetBreakpointsArgs;\n    ids: number[];\n    requestSeq: number;\n    bpsSet: boolean;\n}\n\ninterface IHitConditionBreakpoint {\n    numHits: number;\n    shouldPause: (numHits: number) => boolean;\n}\n\nexport type VariableContext = 'variables' | 'watch' | 'repl' | 'hover';\n\nexport type CrdpScript = Crdp.Debugger.ScriptParsedEvent;\n\nexport type CrdpDomain = keyof Crdp.CrdpClient;\n\nexport type LoadedSourceEventReason = 'new' | 'changed' | 'removed';\n\nexport interface BreakpointSetResult {\n    isSet: boolean;\n    breakpoint: DebugProtocol.Breakpoint;\n}\n\nexport abstract class ChromeDebugAdapter implements IDebugAdapter {\n    public static EVAL_NAME_PREFIX = ChromeUtils.EVAL_NAME_PREFIX;\n    public static EVAL_ROOT = '<eval>';\n\n    private static SCRIPTS_COMMAND = '.scripts';\n    private static THREAD_ID = 1;\n    private static SET_BREAKPOINTS_TIMEOUT = 5000;\n    private static HITCONDITION_MATCHER = /^(>|>=|=|<|<=|%)?\\s*([0-9]+)$/;\n    private static ASYNC_CALL_STACK_DEPTH = 4;\n\n    protected _session: ChromeDebugSession;\n    protected _domains = new Map<CrdpDomain, Crdp.Schema.Domain>();\n    private _clientAttached: boolean;\n    private _currentPauseNotification: Crdp.Debugger.PausedEvent;\n    private _committedBreakpointsByUrl: Map<string, ISetBreakpointResult[]>;\n    private _exception: Crdp.Runtime.RemoteObject;\n    private _setBreakpointsRequestQ: Promise<any>;\n    private _expectingResumedEvent: boolean;\n    protected _expectingStopReason: ReasonType;\n    private _waitAfterStep = Promise.resolve();\n\n    private _frameHandles: Handles<Crdp.Debugger.CallFrame>;\n    private _variableHandles: variables.VariableHandles;\n    private _breakpointIdHandles: utils.ReverseHandles<Crdp.Debugger.BreakpointId>;\n    private _sourceHandles: utils.ReverseHandles<ISourceContainer>;\n\n    private _scriptsById: Map<Crdp.Runtime.ScriptId, CrdpScript>;\n    private _scriptsByUrl: Map<string, CrdpScript>;\n    private _pendingBreakpointsByUrl: Map<string, IPendingBreakpoint>;\n    private _hitConditionBreakpointsById: Map<Crdp.Debugger.BreakpointId, IHitConditionBreakpoint>;\n\n    private _lineColTransformer: LineColTransformer;\n    protected _chromeConnection: ChromeConnection;\n    protected _sourceMapTransformer: BaseSourceMapTransformer;\n    protected _pathTransformer: BasePathTransformer;\n\n    protected _hasTerminated: boolean;\n    protected _inShutdown: boolean;\n    protected _attachMode: boolean;\n    protected _launchAttachArgs: ICommonRequestArgs;\n    protected _port: number;\n    private _blackboxedRegexes: RegExp[] = [];\n    private _skipFileStatuses = new Map<string, boolean>();\n    private _caseSensitivePaths = true;\n\n    private _currentStep = Promise.resolve();\n    private _currentLogMessage = Promise.resolve();\n    private _nextUnboundBreakpointId = 0;\n    private _pauseOnPromiseRejections = true;\n    protected _promiseRejectExceptionFilterEnabled = false;\n\n    private _columnBreakpointsEnabled: boolean;\n\n    private _smartStepEnabled: boolean;\n    private _smartStepCount = 0;\n    private _earlyScripts: Crdp.Debugger.ScriptParsedEvent[] = [];\n\n    private _initialSourceMapsP = Promise.resolve();\n\n    private _lastPauseState: { expecting: ReasonType; event: Crdp.Debugger.PausedEvent };\n\n    private _breakOnLoadHelper: BreakOnLoadHelper | null;\n\n    // Queue to synchronize new source loaded and source removed events so that 'remove' script events\n    // won't be send before the corresponding 'new' event has been sent\n    private _sourceLoadedQueue: Promise<void> = Promise.resolve(null);\n\n    // Promises so ScriptPaused events can wait for ScriptParsed events to finish resolving breakpoints\n    private _scriptIdToBreakpointsAreResolvedDefer = new Map<string, PromiseDefer<void>>();\n\n    private _batchTelemetryReporter: BatchTelemetryReporter;\n\n    public readonly events: StepProgressEventsEmitter;\n\n    public constructor({ chromeConnection, lineColTransformer, sourceMapTransformer, pathTransformer, targetFilter, enableSourceMapCaching }: IChromeDebugAdapterOpts,\n        session: ChromeDebugSession) {\n        telemetry.setupEventHandler(e => session.sendEvent(e));\n        this._batchTelemetryReporter = new BatchTelemetryReporter(telemetry);\n        this._session = session;\n        this._chromeConnection = new (chromeConnection || ChromeConnection)(undefined, targetFilter);\n        this.events = new StepProgressEventsEmitter([this._chromeConnection.events]);\n\n        this._frameHandles = new Handles<Crdp.Debugger.CallFrame>();\n        this._variableHandles = new variables.VariableHandles();\n        this._breakpointIdHandles = new utils.ReverseHandles<Crdp.Debugger.BreakpointId>();\n        this._sourceHandles = new utils.ReverseHandles<ISourceContainer>();\n        this._pendingBreakpointsByUrl = new Map<string, IPendingBreakpoint>();\n        this._hitConditionBreakpointsById = new Map<Crdp.Debugger.BreakpointId, IHitConditionBreakpoint>();\n\n        this._lineColTransformer = new (lineColTransformer || LineColTransformer)(this._session);\n        this._sourceMapTransformer = new (sourceMapTransformer || EagerSourceMapTransformer)(this._sourceHandles, enableSourceMapCaching);\n        this._pathTransformer = new (pathTransformer || RemotePathTransformer)();\n\n        this.clearTargetContext();\n    }\n\n    public get chrome(): Crdp.CrdpClient {\n        return this._chromeConnection.api;\n    }\n\n    public get scriptsById(): Map<Crdp.Runtime.ScriptId, CrdpScript> {\n        return this._scriptsById;\n    }\n\n    public get pathTransformer(): BasePathTransformer {\n        return this._pathTransformer;\n    }\n\n    public get pendingBreakpointsByUrl(): Map<string, IPendingBreakpoint> {\n        return this._pendingBreakpointsByUrl;\n    }\n\n    public get committedBreakpointsByUrl(): Map<string, ISetBreakpointResult[]> {\n        return this._committedBreakpointsByUrl;\n    }\n\n    public get sourceMapTransformer(): BaseSourceMapTransformer {\n        return this._sourceMapTransformer;\n    }\n\n    /**\n     * Called on 'clearEverything' or on a navigation/refresh\n     */\n    protected clearTargetContext(): void {\n        this._sourceMapTransformer.clearTargetContext();\n\n        this._scriptsById = new Map<Crdp.Runtime.ScriptId, Crdp.Debugger.ScriptParsedEvent>();\n        this._scriptsByUrl = new Map<string, Crdp.Debugger.ScriptParsedEvent>();\n\n        this._committedBreakpointsByUrl = new Map<string, ISetBreakpointResult[]>();\n        this._setBreakpointsRequestQ = Promise.resolve();\n\n        this._pathTransformer.clearTargetContext();\n    }\n\n    public initialize(args: IInitializeRequestArgs): DebugProtocol.Capabilities {\n        if (args.supportsMapURLToFilePathRequest) {\n            this._pathTransformer = new FallbackToClientPathTransformer(this._session);\n        }\n\n        this._caseSensitivePaths = args.clientID !== 'visualstudio';\n\n        if (args.pathFormat !== 'path') {\n            throw errors.pathFormat();\n        }\n\n        if (args.locale) {\n            localize = nls.config({ locale: args.locale })();\n        }\n\n        // because session bypasses dispatchRequest\n        if (typeof args.linesStartAt1 === 'boolean') {\n            (<any>this)._clientLinesStartAt1 = args.linesStartAt1;\n        }\n        if (typeof args.columnsStartAt1 === 'boolean') {\n            (<any>this)._clientColumnsStartAt1 = args.columnsStartAt1;\n        }\n\n        const exceptionBreakpointFilters = [\n            {\n                label: localize('exceptions.all', 'All Exceptions'),\n                filter: 'all',\n                default: false\n            },\n            {\n                label: localize('exceptions.uncaught', 'Uncaught Exceptions'),\n                filter: 'uncaught',\n                default: false\n            }\n        ];\n        if (this._promiseRejectExceptionFilterEnabled) {\n            exceptionBreakpointFilters.push({\n                label: localize('exceptions.promise_rejects', 'Promise Rejects'),\n                filter: 'promise_reject',\n                default: false\n            });\n        }\n\n        // This debug adapter supports two exception breakpoint filters\n        return {\n            exceptionBreakpointFilters,\n            supportsConfigurationDoneRequest: true,\n            supportsSetVariable: true,\n            supportsConditionalBreakpoints: true,\n            supportsCompletionsRequest: true,\n            supportsHitConditionalBreakpoints: true,\n            supportsRestartFrame: true,\n            supportsExceptionInfoRequest: true,\n            supportsDelayedStackTraceLoading: true,\n            supportsValueFormattingOptions: true,\n            supportsEvaluateForHovers: true\n        };\n    }\n\n    public configurationDone(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    public get breakOnLoadActive(): boolean {\n        return !!this._breakOnLoadHelper;\n    }\n\n    public async launch(args: ILaunchRequestArgs, telemetryPropertyCollector: ITelemetryPropertyCollector): Promise<void> {\n        this.commonArgs(args);\n        this._sourceMapTransformer.launch(args);\n        this._pathTransformer.launch(args);\n\n        if (args.breakOnLoadStrategy && args.breakOnLoadStrategy !== 'off') {\n            this._breakOnLoadHelper = new BreakOnLoadHelper(this, args.breakOnLoadStrategy);\n        }\n\n        if (!args.__restart) {\n            /* __GDPR__\n               \"debugStarted\" : {\n                  \"request\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                  \"args\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n               }\n            */\n            telemetry.reportEvent('debugStarted', { request: 'launch', args: Object.keys(args) });\n        }\n    }\n\n    public async attach(args: IAttachRequestArgs): Promise<void> {\n        this._attachMode = true;\n        this.commonArgs(args);\n        this._sourceMapTransformer.attach(args);\n        this._pathTransformer.attach(args);\n\n        if (!args.port) {\n            args.port = 9229;\n        }\n\n        /* __GDPR__\n            \"debugStarted\" : {\n                \"request\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"args\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n            }\n        */\n        telemetry.reportEvent('debugStarted', { request: 'attach', args: Object.keys(args) });\n        await this.doAttach(args.port, args.url, args.address, args.timeout, args.websocketUrl, args.extraCRDPChannelPort);\n    }\n\n    protected commonArgs(args: ICommonRequestArgs): void {\n        let logToFile = false;\n        let logLevel: Logger.LogLevel;\n        if (args.trace === 'verbose') {\n            logLevel = Logger.LogLevel.Verbose;\n            logToFile = true;\n        } else if (args.trace) {\n            logLevel = Logger.LogLevel.Warn;\n            logToFile = true;\n        } else {\n            logLevel = Logger.LogLevel.Warn;\n        }\n\n        // The debug configuration provider should have set logFilePath on the launch config. If not, default to 'true' to use the\n        // \"legacy\" log file path from the CDA subclass\n        const logFilePath = args.logFilePath || logToFile;\n        logger.setup(logLevel, logFilePath);\n\n        this._launchAttachArgs = args;\n\n        // Enable sourcemaps and async callstacks by default\n        args.sourceMaps = typeof args.sourceMaps === 'undefined' || args.sourceMaps;\n\n        this._smartStepEnabled = this._launchAttachArgs.smartStep;\n    }\n\n    public shutdown(): void {\n        this._batchTelemetryReporter.finalize();\n        this._inShutdown = true;\n        this._session.shutdown();\n    }\n\n    protected async terminateSession(reason: string, disconnectArgs?: DebugProtocol.DisconnectArguments, restart?: IRestartRequestArgs): Promise<void> {\n        logger.log(`Terminated: ${reason}`);\n\n        if (!this._hasTerminated) {\n            logger.log(`Waiting for any pending steps or log messages.`);\n            await this._currentStep;\n            await this._currentLogMessage;\n            logger.log(`Current step and log messages complete`);\n\n            /* __GDPR__\n               \"debugStopped\" : {\n                  \"reason\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n               }\n             */\n            telemetry.reportEvent('debugStopped', { reason });\n            this._hasTerminated = true;\n            if (this._clientAttached || (this._launchAttachArgs && (<ILaunchRequestArgs>this._launchAttachArgs).noDebug)) {\n                this._session.sendEvent(new TerminatedEvent(restart));\n            }\n\n            if (this._chromeConnection.isAttached) {\n                this._chromeConnection.close();\n            }\n        }\n    }\n\n    /**\n     * Hook up all connection events\n     */\n    protected hookConnectionEvents(): void {\n        this.chrome.Debugger.onPaused((params) => {\n            this.runAndMeasureProcessingTime('target/notification/onPaused', () => {\n                return this.onPaused(params);\n            });\n        });\n        this.chrome.Debugger.onResumed(() => this.onResumed());\n        this.chrome.Debugger.onScriptParsed((params) => {\n            this.runAndMeasureProcessingTime('target/notification/onScriptParsed', () => {\n                return this.onScriptParsed(params);\n            });\n        });\n        this.chrome.Debugger.onBreakpointResolved(params => this.onBreakpointResolved(params));\n\n        this.chrome.Console.onMessageAdded(params => this.onMessageAdded(params));\n        this.chrome.Runtime.onConsoleAPICalled(params => this.onConsoleAPICalled(params));\n        this.chrome.Runtime.onExceptionThrown(params => this.onExceptionThrown(params));\n        this.chrome.Runtime.onExecutionContextsCleared(() => this.onExecutionContextsCleared());\n\n        this._chromeConnection.onClose(() => this.terminateSession('websocket closed'));\n    }\n\n    private async runAndMeasureProcessingTime(notificationName: string, procedure: () => Promise<void>): Promise<void> {\n        const startTime = Date.now();\n        const startTimeMark = process.hrtime();\n        let properties: IExecutionResultTelemetryProperties = {\n            startTime: startTime.toString()\n        };\n\n        try {\n            await procedure();\n            properties.successful = 'true';\n        } catch (e) {\n            properties.successful = 'false';\n            properties.exceptionType = 'firstChance';\n            utils.fillErrorDetails(properties, e);\n        }\n\n        const elapsedTime = utils.calculateElapsedTime(startTimeMark);\n        properties.timeTakenInMilliseconds = elapsedTime.toString();\n        this._batchTelemetryReporter.reportEvent(notificationName, properties);\n    }\n\n    /**\n     * Enable clients and run connection\n     */\n    protected runConnection(): Promise<void>[] {\n        return [\n            this.chrome.Console.enable()\n                .catch(e => { /* Specifically ignore a fail here since it's only for backcompat */ }),\n            utils.toVoidP(this.chrome.Debugger.enable()),\n            this.chrome.Runtime.enable(),\n            this._chromeConnection.run()\n        ];\n    }\n\n    protected async doAttach(port: number, targetUrl?: string, address?: string, timeout?: number, websocketUrl?: string, extraCRDPChannelPort?: number): Promise<void> {\n        this.events.emitStepStarted('Attach');\n        // Client is attaching - if not attached to the chrome target, create a connection and attach\n        this._clientAttached = true;\n        if (!this._chromeConnection.isAttached) {\n            if (websocketUrl) {\n                await this._chromeConnection.attachToWebsocketUrl(websocketUrl, extraCRDPChannelPort);\n            } else {\n                await this._chromeConnection.attach(address, port, targetUrl, timeout, extraCRDPChannelPort);\n            }\n\n            this.events.emitStepStarted('Attach.ConfigureDebuggingSession.Internal');\n\n            this._port = port;\n\n            this.hookConnectionEvents();\n            let patterns: string[] = [];\n\n            if (this._launchAttachArgs.skipFiles) {\n                const skipFilesArgs = this._launchAttachArgs.skipFiles.filter(glob => {\n                    if (glob.startsWith('!')) {\n                        logger.warn(`Warning: skipFiles entries starting with '!' aren't supported and will be ignored. (\"${glob}\")`);\n                        return false;\n                    }\n\n                    return true;\n                });\n\n                patterns = skipFilesArgs.map(glob => utils.pathGlobToBlackboxedRegex(glob));\n            }\n\n            if (this._launchAttachArgs.skipFileRegExps) {\n                patterns = patterns.concat(this._launchAttachArgs.skipFileRegExps);\n            }\n\n            this.events.emitStepStarted('Attach.ConfigureDebuggingSession.Target');\n\n            // Make sure debugging domain is enabled before calling refreshBlackboxPatterns() below\n            await Promise.all(this.runConnection());\n\n            if (patterns.length) {\n                this._blackboxedRegexes = patterns.map(pattern => new RegExp(pattern, 'i'));\n                this.refreshBlackboxPatterns();\n            }\n\n            await this.initSupportedDomains();\n            const maxDepth = this._launchAttachArgs.showAsyncStacks ? ChromeDebugAdapter.ASYNC_CALL_STACK_DEPTH : 0;\n            try {\n                await this.chrome.Debugger.setAsyncCallStackDepth({ maxDepth });\n            } catch (e) {\n                // Not supported by older runtimes, ignore it.\n            }\n        }\n    }\n\n    private async initSupportedDomains(): Promise<void> {\n        try {\n            const domainResponse = await this.chrome.Schema.getDomains();\n            domainResponse.domains.forEach(domain => this._domains.set(<any>domain.name, domain));\n        } catch (e) {\n            // If getDomains isn't supported for some reason, skip this\n        }\n    }\n\n    /**\n     * This event tells the client to begin sending setBP requests, etc. Some consumers need to override this\n     * to send it at a later time of their choosing.\n     */\n    protected async sendInitializedEvent(): Promise<void> {\n        // Wait to finish loading sourcemaps from the initial scriptParsed events\n        if (this._initialSourceMapsP) {\n            const initialSourceMapsP = this._initialSourceMapsP;\n            this._initialSourceMapsP = null;\n\n            await initialSourceMapsP;\n\n            this._session.sendEvent(new InitializedEvent());\n            this.events.emitStepCompleted('NotifyInitialized');\n            await Promise.all(this._earlyScripts.map(script => this.sendLoadedSourceEvent(script)));\n            this._earlyScripts = null;\n        }\n    }\n\n    public doAfterProcessingSourceEvents(action: () => void): Promise<void> {\n        return this._sourceLoadedQueue = this._sourceLoadedQueue.then(action);\n    }\n\n    /**\n     * e.g. the target navigated\n     */\n    protected onExecutionContextsCleared(): Promise<void> {\n        const cachedScriptParsedEvents = Array.from(this._scriptsById.values());\n        return this.doAfterProcessingSourceEvents(async () => { // This will not execute until all the on-flight 'new' source events have been processed\n            for (let scriptedParseEvent of cachedScriptParsedEvents) {\n                const scriptEvent = await this.scriptToLoadedSourceEvent('removed', scriptedParseEvent);\n                this._session.sendEvent(scriptEvent);\n            }\n\n            this.clearTargetContext();\n        });\n    }\n\n    protected async onPaused(notification: Crdp.Debugger.PausedEvent, expectingStopReason = this._expectingStopReason): Promise<void> {\n        if (notification.asyncCallStackTraceId) {\n            await this.chrome.Debugger.pauseOnAsyncCall({ parentStackTraceId: notification.asyncCallStackTraceId });\n            return this.chrome.Debugger.resume();\n        }\n\n        this._variableHandles.onPaused();\n        this._frameHandles.reset();\n        this._exception = undefined;\n        this._lastPauseState = { event: notification, expecting: expectingStopReason };\n        this._currentPauseNotification = notification;\n\n        // If break on load is active, we pass the notification object to breakonload helper\n        // If it returns true, we continue and return\n        if (this.breakOnLoadActive) {\n            let shouldContinue = await this._breakOnLoadHelper.handleOnPaused(notification);\n            if (shouldContinue) {\n                this.chrome.Debugger.resume()\n                    .catch(e => {\n                        logger.error('Failed to resume due to exception: ' + e.message);\n                    });\n                return;\n            }\n        }\n\n        // We can tell when we've broken on an exception. Otherwise if hitBreakpoints is set, assume we hit a\n        // breakpoint. If not set, assume it was a step. We can't tell the difference between step and 'break on anything'.\n        let reason: ReasonType;\n        let smartStepP = Promise.resolve(false);\n        if (notification.reason === 'exception') {\n            reason = 'exception';\n            this._exception = notification.data;\n        } else if (notification.reason === 'promiseRejection') {\n            reason = 'promise_rejection';\n\n            // After processing smartStep and so on, check whether we are paused on a promise rejection, and should continue past it\n            if (this._promiseRejectExceptionFilterEnabled && !this._pauseOnPromiseRejections) {\n                this.chrome.Debugger.resume()\n                    .catch(e => { /* ignore failures */ });\n                return;\n            }\n\n            this._exception = notification.data;\n        } else if (notification.hitBreakpoints && notification.hitBreakpoints.length) {\n            reason = 'breakpoint';\n\n            // Did we hit a hit condition breakpoint?\n            for (let hitBp of notification.hitBreakpoints) {\n                if (this._hitConditionBreakpointsById.has(hitBp)) {\n                    // Increment the hit count and check whether to pause\n                    const hitConditionBp = this._hitConditionBreakpointsById.get(hitBp);\n                    hitConditionBp.numHits++;\n                    // Only resume if we didn't break for some user action (step, pause button)\n                    if (!expectingStopReason && !hitConditionBp.shouldPause(hitConditionBp.numHits)) {\n                        this.chrome.Debugger.resume()\n                            .catch(e => { /* ignore failures */ });\n                        return;\n                    }\n                }\n            }\n        } else if (expectingStopReason) {\n            // If this was a step, check whether to smart step\n            reason = expectingStopReason;\n            smartStepP = this.shouldSmartStep(this._currentPauseNotification.callFrames[0]);\n        } else {\n            reason = 'debugger_statement';\n        }\n\n        this._expectingStopReason = undefined;\n\n        await smartStepP.then(should => {\n            if (should) {\n                this._smartStepCount++;\n                return this.stepIn(false);\n            } else {\n                if (this._smartStepCount > 0) {\n                    logger.log(`SmartStep: Skipped ${this._smartStepCount} steps`);\n                    this._smartStepCount = 0;\n                }\n\n                // Enforce that the stopped event is not fired until we've sent the response to the step that induced it.\n                // Also with a timeout just to ensure things keep moving\n                const sendStoppedEvent = () => {\n                    return this._session.sendEvent(new StoppedEvent2(reason, /*threadId=*/ChromeDebugAdapter.THREAD_ID, this._exception));\n                };\n                return utils.promiseTimeout(this._currentStep, /*timeoutMs=*/300)\n                    .then(sendStoppedEvent, sendStoppedEvent);\n            }\n        }).catch(err => logger.error('Problem while smart stepping: ' + (err && err.stack) ? err.stack : err));\n    }\n\n    public async exceptionInfo(args: DebugProtocol.ExceptionInfoArguments): Promise<IExceptionInfoResponseBody> {\n        if (args.threadId !== ChromeDebugAdapter.THREAD_ID) {\n            throw errors.invalidThread(args.threadId);\n        }\n\n        if (this._exception) {\n            const isError = this._exception.subtype === 'error';\n            const message = isError ? utils.firstLine(this._exception.description) : (this._exception.description || this._exception.value);\n            const formattedMessage = message && message.replace(/\\*/g, '\\\\*');\n            const response: IExceptionInfoResponseBody = {\n                exceptionId: this._exception.className || this._exception.type || 'Error',\n                breakMode: 'unhandled',\n                details: {\n                    stackTrace: this._exception.description && await this.mapFormattedException(this._exception.description),\n                    message,\n                    formattedDescription: formattedMessage, // VS workaround - see https://github.com/Microsoft/vscode/issues/34259\n                    typeName: this._exception.subtype || this._exception.type\n                }\n            };\n\n            return response;\n        } else {\n            throw errors.noStoredException();\n        }\n    }\n\n    private async shouldSmartStep(frame: Crdp.Debugger.CallFrame): Promise<boolean> {\n        if (!this._smartStepEnabled) return Promise.resolve(false);\n\n        const stackFrame = this.callFrameToStackFrame(frame);\n        const clientPath = this._pathTransformer.getClientPathFromTargetPath(stackFrame.source.path) || stackFrame.source.path;\n        const mapping = await this._sourceMapTransformer.mapToAuthored(clientPath, frame.location.lineNumber, frame.location.columnNumber);\n\n        return !mapping;\n    }\n\n    protected onResumed(): void {\n        this._currentPauseNotification = null;\n\n        if (this._expectingResumedEvent) {\n            this._expectingResumedEvent = false;\n\n            // Need to wait to eval just a little after each step, because of #148\n            this._waitAfterStep = utils.promiseTimeout(null, 50);\n        } else {\n            let resumedEvent = new ContinuedEvent(ChromeDebugAdapter.THREAD_ID);\n            this._session.sendEvent(resumedEvent);\n        }\n    }\n\n    private async detectColumnBreakpointSupport(scriptId: Crdp.Runtime.ScriptId): Promise<void> {\n        this._columnBreakpointsEnabled = false; // So it isn't requested multiple times\n        try {\n            await this.chrome.Debugger.getPossibleBreakpoints({\n                start: { scriptId, lineNumber: 0, columnNumber: 0 },\n                end: { scriptId, lineNumber: 1, columnNumber: 0 },\n                restrictToFunction: false\n            });\n            this._columnBreakpointsEnabled = true;\n        } catch (e) {\n            this._columnBreakpointsEnabled = false;\n        }\n\n        this._lineColTransformer.columnBreakpointsEnabled = this._columnBreakpointsEnabled;\n    }\n\n    public getBreakpointsResolvedDefer(scriptId: string): PromiseDefer<void> {\n        const existingValue =  this._scriptIdToBreakpointsAreResolvedDefer.get(scriptId);\n        if (existingValue) {\n            return existingValue;\n        } else {\n            const newValue = promiseDefer<void>();\n            this._scriptIdToBreakpointsAreResolvedDefer.set(scriptId, newValue);\n            return newValue;\n        }\n    }\n\n    protected async onScriptParsed(script: Crdp.Debugger.ScriptParsedEvent): Promise<void> {\n        const breakpointsAreResolvedDefer = this.getBreakpointsResolvedDefer(script.scriptId);\n        try {\n            this.doAfterProcessingSourceEvents(async () => { // This will block future 'removed' source events, until this processing has been completed\n                if (typeof this._columnBreakpointsEnabled === 'undefined') {\n                    await this.detectColumnBreakpointSupport(script.scriptId);\n                    await this.sendInitializedEvent();\n                }\n\n                if (this._earlyScripts) {\n                    this._earlyScripts.push(script);\n                } else {\n                    await this.sendLoadedSourceEvent(script);\n                }\n            });\n\n            if (script.url) {\n                script.url = utils.fixDriveLetter(script.url);\n            } else {\n                script.url = ChromeDebugAdapter.EVAL_NAME_PREFIX + script.scriptId;\n            }\n\n            this._scriptsById.set(script.scriptId, script);\n            this._scriptsByUrl.set(this.fixPathCasing(script.url), script);\n\n            const mappedUrl = await this._pathTransformer.scriptParsed(script.url);\n\n            const resolvePendingBPs = async (source: string) => {\n                source = source && this.fixPathCasing(source);\n                const pendingBP = this._pendingBreakpointsByUrl.get(utils.fixDriveLetter(source)) || this._pendingBreakpointsByUrl.get(utils.fixDriveLetter(source, true));\n                if (pendingBP && !pendingBP.bpsSet) {\n                    await this.resolvePendingBreakpoint(pendingBP);\n                    this._pendingBreakpointsByUrl.delete(source);\n                }\n            };\n\n            const sourceMapsP = this._sourceMapTransformer.scriptParsed(mappedUrl, script.sourceMapURL).then(async sources => {\n                if (this._hasTerminated) {\n                    return undefined;\n                }\n\n                if (sources) {\n                    const filteredSources = sources.filter(source => source !== mappedUrl); // Tools like babel-register will produce sources with the same path as the generated script\n                    for (const filteredSource of filteredSources) {\n                        await resolvePendingBPs(filteredSource);\n                    }\n                }\n\n                if (script.url === mappedUrl && this._pendingBreakpointsByUrl.has(mappedUrl) && this._pendingBreakpointsByUrl.get(mappedUrl).bpsSet) {\n                    // If the pathTransformer had no effect, and we attempted to set the BPs with that path earlier, then assume that they are about\n                    // to be resolved in this loaded script, and remove the pendingBP.\n                    this._pendingBreakpointsByUrl.delete(mappedUrl);\n                } else {\n                    await resolvePendingBPs(mappedUrl);\n                }\n\n                await this.resolveSkipFiles(script, mappedUrl, sources);\n            });\n\n            if (this._initialSourceMapsP) {\n                this._initialSourceMapsP = <Promise<any>>Promise.all([this._initialSourceMapsP, sourceMapsP]);\n            }\n            await sourceMapsP;\n\n            breakpointsAreResolvedDefer.resolve(); // By now no matter which code path we choose, resolving pending breakpoints should be finished, so trigger the defer\n        } catch (exception) {\n            breakpointsAreResolvedDefer.reject(exception);\n        }\n    }\n\n    protected async sendLoadedSourceEvent(script: Crdp.Debugger.ScriptParsedEvent, loadedSourceEventReason: LoadedSourceEventReason = 'new'): Promise<void> {\n        const scriptEvent = await this.scriptToLoadedSourceEvent(loadedSourceEventReason, script);\n        this._session.sendEvent(scriptEvent);\n    }\n\n    private async resolveSkipFiles(script: CrdpScript, mappedUrl: string, sources: string[], toggling?: boolean): Promise<void> {\n        if (sources && sources.length) {\n            const parentIsSkipped = this.shouldSkipSource(script.url);\n            const libPositions: Crdp.Debugger.ScriptPosition[] = [];\n\n            // Figure out skip/noskip transitions within script\n            let inLibRange = parentIsSkipped;\n            const allSources = await this.sourceMapTransformer.allSources(mappedUrl);\n            for (let s of allSources) {\n                let isSkippedFile = this.shouldSkipSource(s);\n                if (typeof isSkippedFile !== 'boolean') {\n                    // Inherit the parent's status\n                    isSkippedFile = parentIsSkipped;\n                }\n\n                this._skipFileStatuses.set(s, isSkippedFile);\n\n                if ((isSkippedFile && !inLibRange) || (!isSkippedFile && inLibRange)) {\n                    const details = await this.sourceMapTransformer.allSourcePathDetails(mappedUrl);\n                    const detail = details.find(d => d.inferredPath === s);\n                    libPositions.push({\n                        lineNumber: detail.startPosition.line,\n                        columnNumber: detail.startPosition.column\n                    });\n                    inLibRange = !inLibRange;\n                }\n            }\n\n            // If there's any change from the default, set proper blackboxed ranges\n            if (libPositions.length || toggling) {\n                if (parentIsSkipped) {\n                    libPositions.splice(0, 0, { lineNumber: 0, columnNumber: 0});\n                }\n\n                await this.chrome.Debugger.setBlackboxedRanges({\n                    scriptId: script.scriptId,\n                    positions: []\n                }).catch(() => this.warnNoSkipFiles());\n\n                if (libPositions.length) {\n                    this.chrome.Debugger.setBlackboxedRanges({\n                        scriptId: script.scriptId,\n                        positions: libPositions\n                    }).catch(() => this.warnNoSkipFiles());\n                }\n            }\n        } else {\n            const status = await this.getSkipStatus(mappedUrl);\n            const skippedByPattern = this.matchesSkipFilesPatterns(mappedUrl);\n            if (typeof status === 'boolean' && status !== skippedByPattern) {\n                const positions = status ? [{ lineNumber: 0, columnNumber: 0 }] : [];\n                this.chrome.Debugger.setBlackboxedRanges({\n                    scriptId: script.scriptId,\n                    positions\n                }).catch(() => this.warnNoSkipFiles());\n            }\n        }\n    }\n\n    private warnNoSkipFiles(): void {\n        logger.log('Warning: this runtime does not support skipFiles');\n    }\n\n    /**\n     * If the source has a saved skip status, return that, whether true or false.\n     * If not, check it against the patterns list.\n     */\n    private shouldSkipSource(sourcePath: string): boolean|undefined {\n        const status = this.getSkipStatus(sourcePath);\n        if (typeof status === 'boolean') {\n            return status;\n        }\n\n        if (this.matchesSkipFilesPatterns(sourcePath)) {\n            return true;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns true if this path matches one of the static skip patterns\n     */\n    private matchesSkipFilesPatterns(sourcePath: string): boolean {\n        return this._blackboxedRegexes.some(regex => {\n            return regex.test(sourcePath);\n        });\n    }\n\n    /**\n     * Returns the current skip status for this path, which is either an authored or generated script.\n     */\n    private getSkipStatus(sourcePath: string): boolean|undefined {\n        if (this._skipFileStatuses.has(sourcePath)) {\n            return this._skipFileStatuses.get(sourcePath);\n        }\n\n        return undefined;\n    }\n\n    public async toggleSmartStep(): Promise<void> {\n        this._smartStepEnabled = !this._smartStepEnabled;\n        this.onPaused(this._lastPauseState.event, this._lastPauseState.expecting);\n    }\n\n    public async toggleSkipFileStatus(args: IToggleSkipFileStatusArgs): Promise<void> {\n        if (args.path) {\n            args.path = utils.fileUrlToPath(args.path);\n        }\n\n        if (!await this.isInCurrentStack(args)) {\n            // Only valid for files that are in the current stack\n            const logName = args.path || this.displayNameForSourceReference(args.sourceReference);\n            logger.log(`Can't toggle the skipFile status for ${logName} - it's not in the current stack.`);\n            return;\n        }\n\n        // e.g. strip <node_internals>/\n        if (args.path) {\n            args.path = this.displayPathToRealPath(args.path);\n        }\n\n        const aPath = args.path || this.fakeUrlForSourceReference(args.sourceReference);\n        const generatedPath = await this._sourceMapTransformer.getGeneratedPathFromAuthoredPath(aPath);\n        if (!generatedPath) {\n            logger.log(`Can't toggle the skipFile status for: ${aPath} - haven't seen it yet.`);\n            return;\n        }\n\n        const sources = await this._sourceMapTransformer.allSources(generatedPath);\n        if (generatedPath === aPath && sources.length) {\n            // Ignore toggling skip status for generated scripts with sources\n            logger.log(`Can't toggle skipFile status for ${aPath} - it's a script with a sourcemap`);\n            return;\n        }\n\n        const newStatus = !this.shouldSkipSource(aPath);\n        logger.log(`Setting the skip file status for: ${aPath} to ${newStatus}`);\n        this._skipFileStatuses.set(aPath, newStatus);\n\n        const targetPath = this._pathTransformer.getTargetPathFromClientPath(generatedPath);\n        const script = this.getScriptByUrl(targetPath);\n\n        await this.resolveSkipFiles(script, generatedPath, sources, /*toggling=*/true);\n\n        if (newStatus) {\n            this.makeRegexesSkip(script.url);\n        } else {\n            this.makeRegexesNotSkip(script.url);\n        }\n\n        this.onPaused(this._lastPauseState.event, this._lastPauseState.expecting);\n    }\n\n    private async isInCurrentStack(args: IToggleSkipFileStatusArgs): Promise<boolean> {\n        const currentStack = await this.stackTrace({ threadId: undefined });\n\n        if (args.path) {\n            return currentStack.stackFrames.some(frame => frame.source.path === args.path);\n        } else {\n            return currentStack.stackFrames.some(frame => frame.source.sourceReference === args.sourceReference);\n        }\n    }\n\n    private makeRegexesNotSkip(noSkipPath: string): void {\n        let somethingChanged = false;\n        this._blackboxedRegexes = this._blackboxedRegexes.map(regex => {\n            const result = utils.makeRegexNotMatchPath(regex, noSkipPath);\n            somethingChanged = somethingChanged || (result !== regex);\n            return result;\n        });\n\n        if (somethingChanged) {\n            this.refreshBlackboxPatterns();\n        }\n    }\n\n    private makeRegexesSkip(skipPath: string): void {\n        let somethingChanged = false;\n        this._blackboxedRegexes = this._blackboxedRegexes.map(regex => {\n            const result = utils.makeRegexMatchPath(regex, skipPath);\n            somethingChanged = somethingChanged || (result !== regex);\n            return result;\n        });\n\n        if (!somethingChanged) {\n            this._blackboxedRegexes.push(new RegExp(utils.pathToRegex(skipPath, this._caseSensitivePaths), 'i'));\n        }\n\n        this.refreshBlackboxPatterns();\n    }\n\n    private refreshBlackboxPatterns(): void {\n        this.chrome.Debugger.setBlackboxPatterns({\n            patterns: this._blackboxedRegexes.map(regex => regex.source)\n        }).catch(() => this.warnNoSkipFiles());\n    }\n\n    public async loadedSources(args: DebugProtocol.LoadedSourcesArguments): Promise<IGetLoadedSourcesResponseBody> {\n        const sources = await Promise.all(Array.from(this._scriptsByUrl.values())\n            .map(script => this.scriptToSource(script)));\n\n        return { sources: sources.sort((a, b) => a.path.localeCompare(b.path)) };\n    }\n\n    public resolvePendingBreakpoint(pendingBP: IPendingBreakpoint): Promise<void> {\n        return this.setBreakpoints(pendingBP.args, pendingBP.requestSeq, pendingBP.ids).then(response => {\n            response.breakpoints.forEach((bp, i) => {\n                bp.id = pendingBP.ids[i];\n                this._session.sendEvent(new BreakpointEvent('changed', bp));\n            });\n        });\n    }\n\n    protected onBreakpointResolved(params: Crdp.Debugger.BreakpointResolvedEvent): void {\n        const script = this._scriptsById.get(params.location.scriptId);\n        if (!script) {\n            // Breakpoint resolved for a script we don't know about\n            return;\n        }\n\n        // If the breakpoint resolved is a stopOnEntry breakpoint, we just return since we don't need to send it to client\n        if (this.breakOnLoadActive && this._breakOnLoadHelper.stopOnEntryBreakpointIdToRequestedFileName.has(params.breakpointId)) {\n            return;\n        }\n\n        const committedBps = this._committedBreakpointsByUrl.get(script.url) || [];\n        if (!committedBps.find(committedBp => committedBp.breakpointId === params.breakpointId)) {\n            committedBps.push({breakpointId: params.breakpointId, actualLocation: params.location});\n        }\n        this._committedBreakpointsByUrl.set(script.url, committedBps);\n\n        const bp = <DebugProtocol.Breakpoint>{\n            id: this._breakpointIdHandles.lookup(params.breakpointId),\n            verified: true,\n            line: params.location.lineNumber,\n            column: params.location.columnNumber\n        };\n        const scriptPath = this._pathTransformer.breakpointResolved(bp, script.url);\n\n        if (this._pendingBreakpointsByUrl.has(scriptPath)) {\n            // If we set these BPs before the script was loaded, remove from the pending list\n            this._pendingBreakpointsByUrl.delete(scriptPath);\n        }\n        this._sourceMapTransformer.breakpointResolved(bp, scriptPath);\n        this._lineColTransformer.breakpointResolved(bp);\n        this._session.sendEvent(new BreakpointEvent('changed', bp));\n    }\n\n    protected onConsoleAPICalled(params: Crdp.Runtime.ConsoleAPICalledEvent): void {\n        const result = formatConsoleArguments(params);\n        if (result) {\n            this.logObjects(result.args, result.isError, params.stackTrace);\n        }\n    }\n\n    private async logObjects(objs: Crdp.Runtime.RemoteObject[], isError = false, stackTrace?: Crdp.Runtime.StackTrace): Promise<void> {\n        // This is an asynchronous method, so ensure that we handle one at a time so that they are sent out in the same order that they came in.\n        this._currentLogMessage = this._currentLogMessage\n            .catch(err => logger.error(err.toString()))\n            .then(async () => {\n                const category = isError ? 'stderr' : 'stdout';\n\n                // Shortcut the common log case to reduce unnecessary back and forth\n                let e: DebugProtocol.OutputEvent;\n                if (objs.length === 1 && objs[0].type === 'string') {\n                    let msg = objs[0].value;\n                    if (isError) {\n                        msg = await this.mapFormattedException(msg);\n                    }\n\n                    e = new OutputEvent(msg + '\\n', category);\n                } else {\n                    e = new OutputEvent('output', category);\n                    e.body.variablesReference = this._variableHandles.create(new variables.LoggedObjects(objs), 'repl');\n                }\n\n                if (stackTrace && stackTrace.callFrames.length) {\n                    const stackFrame = await this.mapCallFrame(stackTrace.callFrames[0]);\n                    e.body.source = stackFrame.source;\n                    e.body.line = stackFrame.line;\n                    e.body.column = stackFrame.column;\n                }\n\n                this._session.sendEvent(e);\n            });\n    }\n\n    protected async onExceptionThrown(params: Crdp.Runtime.ExceptionThrownEvent): Promise<void> {\n        return this._currentLogMessage = this._currentLogMessage.then(async () => {\n            const formattedException = formatExceptionDetails(params.exceptionDetails);\n            const exceptionStr = await this.mapFormattedException(formattedException);\n\n            const e: DebugProtocol.OutputEvent = new OutputEvent(exceptionStr + '\\n', 'stderr');\n            const stackTrace = params.exceptionDetails.stackTrace;\n            if (stackTrace && stackTrace.callFrames.length) {\n                const stackFrame = await this.mapCallFrame(stackTrace.callFrames[0]);\n                e.body.source = stackFrame.source;\n                e.body.line = stackFrame.line;\n                e.body.column = stackFrame.column;\n            }\n\n            this._session.sendEvent(e);\n        });\n    }\n\n    private async mapCallFrame(frame: Crdp.Runtime.CallFrame): Promise<DebugProtocol.StackFrame> {\n        const debuggerCF = this.runtimeCFToDebuggerCF(frame);\n        const stackFrame = this.callFrameToStackFrame(debuggerCF);\n        await this._pathTransformer.fixSource(stackFrame.source);\n        await this._sourceMapTransformer.fixSourceLocation(stackFrame);\n        this._lineColTransformer.convertDebuggerLocationToClient(stackFrame);\n        return stackFrame;\n    }\n\n    // We parse stack trace from `formattedException`, source map it and return a new string\n    protected async mapFormattedException(formattedException: string): Promise<string> {\n        const exceptionLines = formattedException.split(/\\r?\\n/);\n\n        for (let i = 0, len = exceptionLines.length; i < len; ++i) {\n            const line = exceptionLines[i];\n            const matches = line.match(/^\\s+at (.*?)\\s*\\(?([^ ]+):(\\d+):(\\d+)\\)?$/);\n\n            if (!matches) continue;\n            const linePath = matches[2];\n            const lineNum = parseInt(matches[3], 10);\n            const adjustedLineNum = lineNum - 1;\n            const columnNum = parseInt(matches[4], 10);\n            const clientPath = this._pathTransformer.getClientPathFromTargetPath(linePath);\n            const mapped = await this._sourceMapTransformer.mapToAuthored(clientPath || linePath, adjustedLineNum, columnNum);\n\n            if (mapped && mapped.source && utils.isNumber(mapped.line) && utils.isNumber(mapped.column) && utils.existsSync(mapped.source)) {\n                this._lineColTransformer.mappedExceptionStack(mapped);\n                exceptionLines[i] = exceptionLines[i].replace(\n                    `${linePath}:${lineNum}:${columnNum}`,\n                    `${mapped.source}:${mapped.line}:${mapped.column}`);\n            } else if (clientPath && clientPath !== linePath) {\n                const location = { line: adjustedLineNum, column: columnNum };\n                this._lineColTransformer.mappedExceptionStack(location);\n                exceptionLines[i] = exceptionLines[i].replace(\n                    `${linePath}:${lineNum}:${columnNum}`,\n                    `${clientPath}:${location.line}:${location.column}`);\n            }\n        }\n\n        return exceptionLines.join('\\n');\n    }\n\n    /**\n     * For backcompat, also listen to Console.messageAdded, only if it looks like the old format.\n     */\n    protected onMessageAdded(params: any): void {\n        // message.type is undefined when Runtime.consoleAPICalled is being sent\n        if (params && params.message && params.message.type) {\n            const onConsoleAPICalledParams: Crdp.Runtime.ConsoleAPICalledEvent = {\n                type: params.message.type,\n                timestamp: params.message.timestamp,\n                args: params.message.parameters || [{ type: 'string', value: params.message.text }],\n                stackTrace: params.message.stack,\n                executionContextId: 1\n            };\n            this.onConsoleAPICalled(onConsoleAPICalledParams);\n        }\n    }\n\n    public disconnect(args: DebugProtocol.DisconnectArguments): void {\n        this.shutdown();\n        this.terminateSession('Got disconnect request', args);\n    }\n\n    public setBreakpoints(args: ISetBreakpointsArgs, requestSeq: number, ids?: number[]): Promise<ISetBreakpointsResponseBody> {\n        this.reportBpTelemetry(args);\n        if (args.source.path) {\n            args.source.path = this.displayPathToRealPath(args.source.path);\n        }\n\n        return this.validateBreakpointsPath(args)\n            .then(() => {\n                // Deep copy the args that we are going to modify, and keep the original values in originalArgs\n                const originalArgs = args;\n                args = JSON.parse(JSON.stringify(args));\n                this._lineColTransformer.setBreakpoints(args);\n                this._sourceMapTransformer.setBreakpoints(args, requestSeq);\n                this._pathTransformer.setBreakpoints(args);\n\n                // Get the target url of the script\n                let targetScriptUrl: string;\n                if (args.source.sourceReference) {\n                    const handle = this._sourceHandles.get(args.source.sourceReference);\n                    if ((!handle || !handle.scriptId) && args.source.path) {\n                        // A sourcemapped script with inline sources won't have a scriptId here, but the\n                        // source.path has been fixed.\n                        targetScriptUrl = args.source.path;\n                    } else {\n                        const targetScript = this._scriptsById.get(handle.scriptId);\n                        if (targetScript) {\n                            targetScriptUrl = targetScript.url;\n                        }\n                    }\n                } else if (args.source.path) {\n                    targetScriptUrl = args.source.path;\n                }\n\n                if (targetScriptUrl) {\n                    // DebugProtocol sends all current breakpoints for the script. Clear all breakpoints for the script then add all of them\n                    const internalBPs = args.breakpoints.map(bp => new InternalSourceBreakpoint(bp));\n                    const setBreakpointsPFailOnError = this._setBreakpointsRequestQ\n                        .then(() => this.clearAllBreakpoints(targetScriptUrl))\n                        .then(() => this.addBreakpoints(targetScriptUrl, internalBPs))\n                        .then(responses => ({ breakpoints: this.targetBreakpointResponsesToBreakpointSetResults(targetScriptUrl, responses, internalBPs, ids) }));\n\n                    const setBreakpointsPTimeout = utils.promiseTimeout(setBreakpointsPFailOnError, ChromeDebugAdapter.SET_BREAKPOINTS_TIMEOUT, localize('setBPTimedOut', 'Set breakpoints request timed out'));\n\n                    // Do just one setBreakpointsRequest at a time to avoid interleaving breakpoint removed/breakpoint added requests to Crdp, which causes issues.\n                    // Swallow errors in the promise queue chain so it doesn't get blocked, but return the failing promise for error handling.\n                    this._setBreakpointsRequestQ = setBreakpointsPTimeout.catch(e => {\n                        // Log the timeout, but any other error will be logged elsewhere\n                        if (e.message && e.message.indexOf('timed out') >= 0) {\n                            logger.error(e.stack);\n                        }\n                    });\n\n                    // Return the setBP request, no matter how long it takes. It may take awhile in Node 7.5 - 7.7, see https://github.com/nodejs/node/issues/11589\n                    return setBreakpointsPFailOnError.then(setBpResultBody => {\n                        const body = { breakpoints: setBpResultBody.breakpoints.map(setBpResult => setBpResult.breakpoint) };\n                        if (body.breakpoints.every(bp => !bp.verified)) {\n                            // If all breakpoints are set, we mark them as set. If not, we mark them as un-set so they'll be set\n                            const areAllSet = setBpResultBody.breakpoints.every(setBpResult => setBpResult.isSet);\n                            // We need to send the original args to avoid adjusting the line and column numbers twice here\n                            return this.unverifiedBpResponseForBreakpoints(originalArgs, requestSeq, body.breakpoints, localize('bp.fail.unbound', 'Breakpoints set but not yet bound'), areAllSet);\n                        }\n                        this._sourceMapTransformer.setBreakpointsResponse(body, requestSeq);\n                        this._lineColTransformer.setBreakpointsResponse(body);\n                        return body;\n                    });\n                } else {\n                    return Promise.resolve(this.unverifiedBpResponse(args, requestSeq, localize('bp.fail.noscript', \"Can't find script for breakpoint request\")));\n                }\n            },\n            e => this.unverifiedBpResponse(args, requestSeq, e.message));\n    }\n\n    private reportBpTelemetry(args: ISetBreakpointsArgs): void {\n        let fileExt = '';\n        if (args.source.path) {\n            fileExt = path.extname(args.source.path);\n        }\n\n        /* __GDPR__\n           \"setBreakpointsRequest\" : {\n              \"fileExt\" : { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" }\n           }\n         */\n        telemetry.reportEvent('setBreakpointsRequest', { fileExt });\n    }\n\n    protected validateBreakpointsPath(args: ISetBreakpointsArgs): Promise<void> {\n        if (!args.source.path || args.source.sourceReference) return Promise.resolve();\n\n        // When break on load is active, we don't need to validate the path, so return\n        if (this.breakOnLoadActive) {\n            return Promise.resolve();\n        }\n\n        return this._sourceMapTransformer.getGeneratedPathFromAuthoredPath(args.source.path).then<void>(mappedPath => {\n\n            if (!mappedPath) {\n                return utils.errP(localize('validateBP.sourcemapFail', 'Breakpoint ignored because generated code not found (source map problem?).'));\n            }\n\n            const targetPath = this._pathTransformer.getTargetPathFromClientPath(mappedPath);\n            if (!targetPath) {\n                return utils.errP(localize('validateBP.notFound', 'Breakpoint ignored because target path not found'));\n            }\n\n            return undefined;\n        });\n    }\n\n    private generateNextUnboundBreakpointId(): string {\n        const unboundBreakpointUniquePrefix = '__::[vscode_chrome_debug_adapter_unbound_breakpoint]::';\n        return `${unboundBreakpointUniquePrefix}${this._nextUnboundBreakpointId++}`;\n    }\n\n    private unverifiedBpResponse(args: ISetBreakpointsArgs, requestSeq: number, message?: string, bpsSet = false): ISetBreakpointsResponseBody {\n        const breakpoints = args.breakpoints.map(bp => {\n            return <DebugProtocol.Breakpoint>{\n                verified: false,\n                line: bp.line,\n                column: bp.column,\n                message,\n                id: this._breakpointIdHandles.create(this.generateNextUnboundBreakpointId())\n            };\n        });\n\n        return this.unverifiedBpResponseForBreakpoints(args, requestSeq, breakpoints, message, bpsSet);\n    }\n\n    private unverifiedBpResponseForBreakpoints(args: ISetBreakpointsArgs, requestSeq: number, breakpoints: DebugProtocol.Breakpoint[], defaultMessage?: string, bpsSet = false): ISetBreakpointsResponseBody {\n        breakpoints.forEach(bp => {\n            if (!bp.message) {\n                bp.message = defaultMessage;\n            }\n        });\n\n        if (args.source.path) {\n            const ids = breakpoints.map(bp => bp.id);\n            this._pendingBreakpointsByUrl.set(\n                this.fixPathCasing(args.source.path),\n                { args, ids, requestSeq, bpsSet });\n        }\n\n        return { breakpoints };\n    }\n\n    private clearAllBreakpoints(url: string): Promise<void> {\n        if (!this._committedBreakpointsByUrl.has(url)) {\n            return Promise.resolve();\n        }\n\n        // Remove breakpoints one at a time. Seems like it would be ok to send the removes all at once,\n        // but there is a chrome bug where when removing 5+ or so breakpoints at once, it gets into a weird\n        // state where later adds on the same line will fail with 'breakpoint already exists' even though it\n        // does not break there.\n        return this._committedBreakpointsByUrl.get(url).reduce((p, bp) => {\n            return p.then(() => this.chrome.Debugger.removeBreakpoint({ breakpointId: bp.breakpointId })).then(() => { });\n        }, Promise.resolve()).then(() => {\n            this._committedBreakpointsByUrl.delete(url);\n        });\n    }\n\n    /**\n     * Makes the actual call to either Debugger.setBreakpoint or Debugger.setBreakpointByUrl, and returns the response.\n     * Responses from setBreakpointByUrl are transformed to look like the response from setBreakpoint, so they can be\n     * handled the same.\n     */\n    protected async addBreakpoints(url: string, breakpoints: InternalSourceBreakpoint[]): Promise<ISetBreakpointResult[]> {\n        let responsePs: Promise<ISetBreakpointResult>[];\n        if (ChromeUtils.isEvalScript(url)) {\n            // eval script with no real url - use debugger_setBreakpoint\n            const scriptId: Crdp.Runtime.ScriptId = utils.lstrip(url, ChromeDebugAdapter.EVAL_NAME_PREFIX);\n            responsePs = breakpoints.map(({ line, column = 0, condition }, i) => this.chrome.Debugger.setBreakpoint({ location: { scriptId, lineNumber: line, columnNumber: column }, condition }));\n        } else {\n            // script that has a url - use debugger_setBreakpointByUrl so that Chrome will rebind the breakpoint immediately\n            // after refreshing the page. This is the only way to allow hitting breakpoints in code that runs immediately when\n            // the page loads.\n            const script = this.getScriptByUrl(url);\n\n            // If script has been parsed, script object won't be undefined and we would have the mapping file on the disk and we can directly set breakpoint using that\n            if (!this.breakOnLoadActive || script) {\n                const urlRegex = utils.pathToRegex(url, this._caseSensitivePaths);\n                responsePs = breakpoints.map(({ line, column = 0, condition }, i) => {\n                    return this.addOneBreakpointByUrl(script && script.scriptId, urlRegex, line, column, condition);\n                });\n            } else { // Else if script hasn't been parsed and break on load is active, we need to do extra processing\n                if (this.breakOnLoadActive) {\n                    return await this._breakOnLoadHelper.handleAddBreakpoints(url, breakpoints);\n                }\n            }\n        }\n\n        // Join all setBreakpoint requests to a single promise\n        return Promise.all(responsePs);\n    }\n\n    private async addOneBreakpointByUrl(scriptId: Crdp.Runtime.ScriptId | undefined, urlRegex: string, lineNumber: number, columnNumber: number, condition: string): Promise<ISetBreakpointResult> {\n        let bpLocation = { lineNumber, columnNumber };\n        if (this._columnBreakpointsEnabled && scriptId) { // scriptId undefined when script not yet loaded, can't fix up column BP :(\n            try {\n                const possibleBpResponse = await this.chrome.Debugger.getPossibleBreakpoints({\n                    start: { scriptId, lineNumber, columnNumber: 0 },\n                    end: { scriptId, lineNumber: lineNumber + 1, columnNumber: 0 },\n                    restrictToFunction: false });\n                if (possibleBpResponse.locations.length) {\n                    const selectedLocation = ChromeUtils.selectBreakpointLocation(lineNumber, columnNumber, possibleBpResponse.locations);\n                    bpLocation = { lineNumber: selectedLocation.lineNumber, columnNumber: selectedLocation.columnNumber || 0 };\n                }\n            } catch (e) {\n                // getPossibleBPs not supported\n            }\n        }\n\n        let result;\n        try {\n            result = await this.chrome.Debugger.setBreakpointByUrl({ urlRegex, lineNumber: bpLocation.lineNumber, columnNumber: bpLocation.columnNumber, condition });\n        } catch (e) {\n            if (e.message === 'Breakpoint at specified location already exists.') {\n                return {\n                    actualLocation: { lineNumber: bpLocation.lineNumber, columnNumber: bpLocation.columnNumber, scriptId }\n                };\n            } else {\n                throw e;\n            }\n        }\n\n        // Now convert the response to a SetBreakpointResponse so both response types can be handled the same\n        const locations = result.locations;\n        return <Crdp.Debugger.SetBreakpointResponse>{\n            breakpointId: result.breakpointId,\n            actualLocation: locations[0] && {\n                lineNumber: locations[0].lineNumber,\n                columnNumber: locations[0].columnNumber,\n                scriptId\n            }\n        };\n    }\n\n    private targetBreakpointResponsesToBreakpointSetResults(url: string, responses: ISetBreakpointResult[], requestBps: InternalSourceBreakpoint[], ids?: number[]): BreakpointSetResult[] {\n        // Don't cache errored responses\n        const committedBps = responses\n            .filter(response => response && response.breakpointId);\n\n        // Cache successfully set breakpoint ids from chrome in committedBreakpoints set\n        this._committedBreakpointsByUrl.set(url, committedBps);\n\n        // Map committed breakpoints to DebugProtocol response breakpoints\n        return responses\n            .map((response, i) => {\n                // The output list needs to be the same length as the input list, so map errors to\n                // unverified breakpoints.\n                if (!response) {\n                    return {\n                        isSet: false,\n                        breakpoint: <DebugProtocol.Breakpoint>{\n                            verified: false\n                        }\n                    };\n                }\n\n                // response.breakpointId is undefined when no target BP is backing this BP, e.g. it's at the same location\n                // as another BP\n                const responseBpId = response.breakpointId || this.generateNextUnboundBreakpointId();\n\n                let bpId: number;\n                if (ids && ids[i]) {\n                    // IDs passed in for previously unverified BPs\n                    bpId = ids[i];\n                    this._breakpointIdHandles.set(bpId, responseBpId);\n                } else {\n                    bpId = this._breakpointIdHandles.lookup(responseBpId) ||\n                        this._breakpointIdHandles.create(responseBpId);\n                }\n\n                if (!response.actualLocation) {\n                    // If we don't have an actualLocation nor a breakpointId this is a pseudo-breakpoint because we are using break-on-load\n                    // so we mark the breakpoint as not set, so i'll be set after we load the actual script that has the breakpoint\n                    return {\n                        isSet: response.breakpointId !== undefined,\n                            breakpoint: <DebugProtocol.Breakpoint>{\n                                id: bpId,\n                                verified: false\n                        }\n                    };\n                }\n\n                const thisBpRequest = requestBps[i];\n                if (thisBpRequest.hitCondition) {\n                    if (!this.addHitConditionBreakpoint(thisBpRequest, response)) {\n                        return  {\n                            isSet: true,\n                            breakpoint: <DebugProtocol.Breakpoint>{\n                                id: bpId,\n                                message: localize('invalidHitCondition', 'Invalid hit condition: {0}', thisBpRequest.hitCondition),\n                                verified: false\n                            }\n                        };\n                    }\n                }\n\n                return {\n                    isSet: true,\n                    breakpoint: <DebugProtocol.Breakpoint>{\n                        id: bpId,\n                        verified: true,\n                        line: response.actualLocation.lineNumber,\n                        column: response.actualLocation.columnNumber\n                    }\n                };\n            });\n    }\n\n    private addHitConditionBreakpoint(requestBp: InternalSourceBreakpoint, response: ISetBreakpointResult): boolean {\n        const result = ChromeDebugAdapter.HITCONDITION_MATCHER.exec(requestBp.hitCondition.trim());\n        if (result && result.length >= 3) {\n            let op = result[1] || '>=';\n            if (op === '=') op = '==';\n            const value = result[2];\n            const expr = op === '%'\n                ? `return (numHits % ${value}) === 0;`\n                : `return numHits ${op} ${value};`;\n\n            // eval safe because of the regex, and this is only a string that the current user will type in\n            /* tslint:disable:no-function-constructor-with-string-args */\n            const shouldPause: (numHits: number) => boolean = <any>new Function('numHits', expr);\n            /* tslint:enable:no-function-constructor-with-string-args */\n            this._hitConditionBreakpointsById.set(response.breakpointId, { numHits: 0, shouldPause });\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public setExceptionBreakpoints(args: DebugProtocol.SetExceptionBreakpointsArguments): Promise<void> {\n        let state: 'all' | 'uncaught' | 'none';\n        if (args.filters.indexOf('all') >= 0) {\n            state = 'all';\n        } else if (args.filters.indexOf('uncaught') >= 0) {\n            state = 'uncaught';\n        } else {\n            state = 'none';\n        }\n\n        if (args.filters.indexOf('promise_reject') >= 0) {\n            this._pauseOnPromiseRejections = true;\n        } else {\n            this._pauseOnPromiseRejections = false;\n        }\n\n        return this.chrome.Debugger.setPauseOnExceptions({ state })\n            .then(() => { });\n    }\n\n    /**\n     * internal -> suppress telemetry\n     */\n    public continue(internal = false): Promise<void> {\n        /* __GDPR__ \"continueRequest\" : { } */\n        if (!internal) telemetry.reportEvent('continueRequest');\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        this._expectingResumedEvent = true;\n        return this._currentStep = this.chrome.Debugger.resume()\n            .then(() => { /* make void */ },\n                e => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    public next(): Promise<void> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        /* __GDPR__ \"nextRequest\" : { } */\n        telemetry.reportEvent('nextRequest');\n        this._expectingStopReason = 'step';\n        this._expectingResumedEvent = true;\n        return this._currentStep = this.chrome.Debugger.stepOver()\n            .then(() => { /* make void */ },\n                e => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    public stepIn(userInitiated = true): Promise<void> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        if (userInitiated) {\n            /* __GDPR__ \"stepInRequest\" : { } */\n            telemetry.reportEvent('stepInRequest');\n        }\n\n        this._expectingStopReason = 'step';\n        this._expectingResumedEvent = true;\n        return this._currentStep = this.chrome.Debugger.stepInto({ breakOnAsyncCall: true })\n            .then(() => { /* make void */ },\n                e => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    public stepOut(): Promise<void> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        /* __GDPR__ \"stepOutRequest\" : { } */\n        telemetry.reportEvent('stepOutRequest');\n        this._expectingStopReason = 'step';\n        this._expectingResumedEvent = true;\n        return this._currentStep = this.chrome.Debugger.stepOut()\n            .then(() => { /* make void */ },\n                e => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    public stepBack(): Promise<void> {\n        return (<TimeTravelRuntime>this.chrome).TimeTravel.stepBack()\n            .then(() => { /* make void */ },\n                e => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    protected reverseContinue(): Promise<void> {\n        return (<TimeTravelRuntime>this.chrome).TimeTravel.reverse()\n            .then(() => { /* make void */ },\n                e => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    public pause(): Promise<void> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        /* __GDPR__ \"pauseRequest\" : { } */\n        telemetry.reportEvent('pauseRequest');\n        this._expectingStopReason = 'pause';\n        return this._currentStep = this.chrome.Debugger.pause()\n            .then(() => { });\n    }\n\n    public async stackTrace(args: DebugProtocol.StackTraceArguments): Promise<IStackTraceResponseBody> {\n        if (!this._currentPauseNotification) {\n            return Promise.reject(errors.noCallStackAvailable());\n        }\n\n        let stackFrames = this._currentPauseNotification.callFrames.map(frame => this.callFrameToStackFrame(frame))\n            .concat(this.asyncFrames(this._currentPauseNotification.asyncStackTrace));\n\n        const totalFrames = stackFrames.length;\n        if (typeof args.startFrame === 'number') {\n            stackFrames = stackFrames.slice(args.startFrame);\n        }\n\n        if (typeof args.levels === 'number') {\n            stackFrames = stackFrames.slice(0, args.levels);\n        }\n\n        const stackTraceResponse: IInternalStackTraceResponseBody = {\n            stackFrames,\n            totalFrames\n        };\n        this._pathTransformer.stackTraceResponse(stackTraceResponse);\n        await this._sourceMapTransformer.stackTraceResponse(stackTraceResponse);\n        this._lineColTransformer.stackTraceResponse(stackTraceResponse);\n\n        await Promise.all(stackTraceResponse.stackFrames.map(async (frame, i) => {\n            // Remove isSourceMapped to convert back to DebugProtocol.StackFrame\n            const isSourceMapped = frame.isSourceMapped;\n            delete frame.isSourceMapped;\n\n            if (!frame.source) {\n                return;\n            }\n\n            // Apply hints to skipped frames\n            const getSkipReason = reason => localize('skipReason', \"(skipped by '{0}')\", reason);\n            if (frame.source.path && this.shouldSkipSource(frame.source.path)) {\n                frame.source.origin = (frame.source.origin ? frame.source.origin + ' ' : '') + getSkipReason('skipFiles');\n                frame.source.presentationHint = 'deemphasize';\n            } else if (this._smartStepEnabled && !isSourceMapped) {\n                frame.source.origin = (frame.source.origin ? frame.source.origin + ' ' : '') + getSkipReason('smartStep');\n                frame.source.presentationHint = 'deemphasize';\n            }\n\n            // Allow consumer to adjust final path\n            if (frame.source.path && frame.source.sourceReference) {\n                frame.source.path = this.realPathToDisplayPath(frame.source.path);\n            }\n\n            // And finally, remove the fake eval path and fix the name, if it was never resolved to a real path\n            if (frame.source.path && ChromeUtils.isEvalScript(frame.source.path)) {\n                frame.source.path = undefined;\n                frame.source.name = this.displayNameForSourceReference(frame.source.sourceReference);\n            }\n\n            // Format stackframe name\n            frame.name = this.formatStackFrameName(frame, args.format);\n        }));\n\n        return stackTraceResponse;\n    }\n\n    private asyncFrames(stackTrace: Crdp.Runtime.StackTrace): DebugProtocol.StackFrame[] {\n        if (stackTrace) {\n            const frames = stackTrace.callFrames\n                .map(frame => this.runtimeCFToDebuggerCF(frame))\n                .map(frame => this.callFrameToStackFrame(frame));\n\n            frames.unshift({\n                id: this._frameHandles.create(null),\n                name: `[ ${stackTrace.description} ]`,\n                source: undefined,\n                line: undefined,\n                column: undefined,\n                presentationHint: 'label'\n            });\n\n            return frames.concat(this.asyncFrames(stackTrace.parent));\n        } else {\n            return [];\n        }\n    }\n\n    private runtimeCFToDebuggerCF(frame: Crdp.Runtime.CallFrame): Crdp.Debugger.CallFrame {\n        return {\n            callFrameId: undefined,\n            scopeChain: undefined,\n            this: undefined,\n            location: {\n                lineNumber: frame.lineNumber,\n                columnNumber: frame.columnNumber,\n                scriptId: frame.scriptId\n            },\n            url: frame.url,\n            functionName: frame.functionName\n        };\n    }\n\n    private async scriptToLoadedSourceEvent(reason: LoadedSourceEventReason, script: Crdp.Debugger.ScriptParsedEvent): Promise<LoadedSourceEvent> {\n        const source = await this.scriptToSource(script);\n        return new LoadedSourceEvent(reason, source as any);\n    }\n\n    private async scriptToSource(script: Crdp.Debugger.ScriptParsedEvent): Promise<DebugProtocol.Source> {\n        const sourceReference = this.getSourceReferenceForScriptId(script.scriptId);\n        const origin = this.getReadonlyOrigin(script.url);\n\n        const properlyCasedScriptUrl = this.fixPathCasing(script.url);\n        const displayPath = this.realPathToDisplayPath(properlyCasedScriptUrl);\n\n        const exists = await utils.existsAsync(script.url);\n        return <DebugProtocol.Source>{\n            name: path.basename(displayPath),\n            path: displayPath,\n            // if the path exists, do not send the sourceReference\n            sourceReference: exists ? undefined : sourceReference,\n            origin\n        };\n    }\n\n    private formatStackFrameName(frame: DebugProtocol.StackFrame, formatArgs?: DebugProtocol.StackFrameFormat): string {\n        let formattedName = frame.name;\n        if (formatArgs) {\n            if (formatArgs.module) {\n                formattedName += ` [${frame.source.name}]`;\n            }\n\n            if (formatArgs.line) {\n                formattedName += ` Line ${frame.line}`;\n            }\n        }\n\n        return formattedName;\n    }\n\n    private callFrameToStackFrame(frame: Crdp.Debugger.CallFrame): DebugProtocol.StackFrame {\n        const { location, functionName } = frame;\n        const line = location.lineNumber;\n        const column = location.columnNumber;\n        const script = this._scriptsById.get(location.scriptId);\n\n        try {\n            // When the script has a url and isn't one we're ignoring, send the name and path fields. PathTransformer will\n            // attempt to resolve it to a script in the workspace. Otherwise, send the name and sourceReference fields.\n            const sourceReference = this.getSourceReferenceForScriptId(script.scriptId);\n            const origin = this.getReadonlyOrigin(script.url);\n            const source: DebugProtocol.Source = {\n                name: path.basename(script.url),\n                path: script.url,\n                sourceReference,\n                origin\n            };\n\n            // If the frame doesn't have a function name, it's either an anonymous function\n            // or eval script. If its source has a name, it's probably an anonymous function.\n            const frameName = functionName || (script.url ? '(anonymous function)' : '(eval code)');\n            return {\n                id: this._frameHandles.create(frame),\n                name: frameName,\n                source,\n                line,\n                column\n            };\n        } catch (e) {\n            // Some targets such as the iOS simulator behave badly and return nonsense callFrames.\n            // In these cases, return a dummy stack frame\n            const evalUnknown = `${ChromeDebugAdapter.EVAL_NAME_PREFIX}_Unknown`;\n            return {\n                id: this._frameHandles.create(<any>{ }),\n                name: evalUnknown,\n                source: { name: evalUnknown, path: evalUnknown },\n                line,\n                column\n            };\n        }\n    }\n\n    protected getReadonlyOrigin(url: string): string {\n        // To override\n        return undefined;\n    }\n\n    /**\n     * Called when returning a stack trace, for the path for Sources that have a sourceReference, so consumers can\n     * tweak it, since it's only for display.\n     */\n    protected realPathToDisplayPath(realPath: string): string {\n        if (ChromeUtils.isEvalScript(realPath)) {\n            return `${ChromeDebugAdapter.EVAL_ROOT}/${realPath}`;\n        }\n\n        return realPath;\n    }\n\n    protected displayPathToRealPath(displayPath: string): string {\n        if (displayPath.startsWith(ChromeDebugAdapter.EVAL_ROOT)) {\n            return displayPath.substr(ChromeDebugAdapter.EVAL_ROOT.length + 1); // Trim \"<eval>/\"\n        }\n\n        return displayPath;\n    }\n\n    /**\n     * Get the existing handle for this script, identified by runtime scriptId, or create a new one\n     */\n    private getSourceReferenceForScriptId(scriptId: Crdp.Runtime.ScriptId): number {\n        return this._sourceHandles.lookupF(container => container.scriptId === scriptId) ||\n            this._sourceHandles.create({ scriptId });\n    }\n\n    public scopes(args: DebugProtocol.ScopesArguments): IScopesResponseBody {\n        const currentFrame = this._frameHandles.get(args.frameId);\n        if (!currentFrame || !currentFrame.location || !currentFrame.callFrameId) {\n            throw errors.stackFrameNotValid();\n        }\n\n        if (!currentFrame.callFrameId) {\n            return { scopes: [] };\n        }\n\n        const currentScript = this._scriptsById.get(currentFrame.location.scriptId);\n        const currentScriptUrl = currentScript && currentScript.url;\n        const currentScriptPath = (currentScriptUrl && this._pathTransformer.getClientPathFromTargetPath(currentScriptUrl)) || currentScriptUrl;\n\n        const scopes = currentFrame.scopeChain.map((scope: Crdp.Debugger.Scope, i: number) => {\n            // The first scope should include 'this'. Keep the RemoteObject reference for use by the variables request\n            const thisObj = i === 0 && currentFrame.this;\n            const returnValue = i === 0 && currentFrame.returnValue;\n            const variablesReference = this._variableHandles.create(\n                new ScopeContainer(currentFrame.callFrameId, i, scope.object.objectId, thisObj, returnValue));\n\n            const resultScope = <DebugProtocol.Scope>{\n                name: scope.type.substr(0, 1).toUpperCase() + scope.type.substr(1), // Take Chrome's scope, uppercase the first letter\n                variablesReference,\n                expensive: scope.type === 'global'\n            };\n\n            if (scope.startLocation && scope.endLocation) {\n                resultScope.column = scope.startLocation.columnNumber;\n                resultScope.line = scope.startLocation.lineNumber;\n                resultScope.endColumn = scope.endLocation.columnNumber;\n                resultScope.endLine = scope.endLocation.lineNumber;\n            }\n\n            return resultScope;\n        });\n\n        if (this._exception && this.lookupFrameIndex(args.frameId) === 0) {\n            scopes.unshift(<DebugProtocol.Scope>{\n                name: localize('scope.exception', 'Exception'),\n                variablesReference: this._variableHandles.create(ExceptionContainer.create(this._exception))\n            });\n        }\n\n        const scopesResponse = { scopes };\n        if (currentScriptPath) {\n            this._sourceMapTransformer.scopesResponse(currentScriptPath, scopesResponse);\n            this._lineColTransformer.scopeResponse(scopesResponse);\n        }\n\n        return scopesResponse;\n    }\n\n    /**\n     * Try to lookup the index of the frame with given ID. Returns -1 for async frames and unknown frames.\n     */\n    private lookupFrameIndex(frameId: number): number {\n        const currentFrame = this._frameHandles.get(frameId);\n        if (!currentFrame || !currentFrame.callFrameId) {\n            return -1;\n        }\n\n        return this._currentPauseNotification.callFrames.findIndex(frame => frame.callFrameId === currentFrame.callFrameId);\n    }\n\n    public variables(args: DebugProtocol.VariablesArguments): Promise<IVariablesResponseBody> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        const handle = this._variableHandles.get(args.variablesReference);\n        if (!handle) {\n            return Promise.resolve<IVariablesResponseBody>(undefined);\n        }\n\n        return handle.expand(this, args.filter, args.start, args.count)\n            .catch(err => {\n                logger.log('Error handling variables request: ' + err.toString());\n                return [];\n            }).then(variables => {\n                return { variables };\n            });\n    }\n\n    public propertyDescriptorToVariable(propDesc: Crdp.Runtime.PropertyDescriptor, owningObjectId?: string, parentEvaluateName?: string): Promise<DebugProtocol.Variable> {\n        if (propDesc.get) {\n            // Getter\n            const grabGetterValue = 'function remoteFunction(propName) { return this[propName]; }';\n            return this.chrome.Runtime.callFunctionOn({\n                objectId: owningObjectId,\n                functionDeclaration: grabGetterValue,\n                arguments: [{ value: propDesc.name }]\n            }).then(response => {\n                if (response.exceptionDetails) {\n                    // Not an error, getter could be `get foo() { throw new Error('bar'); }`\n                    const exceptionMessage = ChromeUtils.errorMessageFromExceptionDetails(response.exceptionDetails);\n                    logger.verbose('Exception thrown evaluating getter - ' + exceptionMessage);\n                    return { name: propDesc.name, value: exceptionMessage, variablesReference: 0 };\n                } else {\n                    return this.remoteObjectToVariable(propDesc.name, response.result, parentEvaluateName);\n                }\n            },\n            error => {\n                logger.error('Error evaluating getter - ' + error.toString());\n                return { name: propDesc.name, value: error.toString(), variablesReference: 0 };\n            });\n        } else if (propDesc.set) {\n            // setter without a getter, unlikely\n            return Promise.resolve({ name: propDesc.name, value: 'setter', variablesReference: 0 });\n        } else {\n            // Non getter/setter\n            return this.internalPropertyDescriptorToVariable(propDesc, parentEvaluateName);\n        }\n    }\n\n    public getVariablesForObjectId(objectId: string, evaluateName?: string, filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]> {\n        if (typeof start === 'number' && typeof count === 'number') {\n            return this.getFilteredVariablesForObject(objectId, evaluateName, filter, start, count);\n        }\n\n        filter = filter === 'indexed' ? 'all' : filter;\n\n        return Promise.all([\n            // Need to make two requests to get all properties\n            this.getRuntimeProperties({ objectId, ownProperties: false, accessorPropertiesOnly: true, generatePreview: true }),\n            this.getRuntimeProperties({ objectId, ownProperties: true, accessorPropertiesOnly: false, generatePreview: true })\n        ]).then(getPropsResponses => {\n            // Sometimes duplicates will be returned - merge all descriptors by name\n            const propsByName = new Map<string, Crdp.Runtime.PropertyDescriptor>();\n            const internalPropsByName = new Map<string, Crdp.Runtime.InternalPropertyDescriptor>();\n            getPropsResponses.forEach(response => {\n                if (response) {\n                    response.result.forEach(propDesc =>\n                        propsByName.set(propDesc.name, propDesc));\n\n                    if (response.internalProperties) {\n                        response.internalProperties.forEach(internalProp => {\n                            internalPropsByName.set(internalProp.name, internalProp);\n                        });\n                    }\n                }\n            });\n\n            // Convert Chrome prop descriptors to DebugProtocol vars\n            const variables: Promise<DebugProtocol.Variable>[] = [];\n            propsByName.forEach(propDesc => {\n                if (!filter || filter === 'all' || (isIndexedPropName(propDesc.name) === (filter === 'indexed'))) {\n                    variables.push(this.propertyDescriptorToVariable(propDesc, objectId, evaluateName));\n                }\n            });\n\n            internalPropsByName.forEach(internalProp => {\n                if (!filter || filter === 'all' || (isIndexedPropName(internalProp.name) === (filter === 'indexed'))) {\n                    variables.push(Promise.resolve(this.internalPropertyDescriptorToVariable(internalProp, evaluateName)));\n                }\n            });\n\n            return Promise.all(variables);\n        }).then(variables => {\n            // Sort all variables properly\n            return variables.sort((var1, var2) => ChromeUtils.compareVariableNames(var1.name, var2.name));\n        });\n    }\n\n    private getRuntimeProperties(params: Crdp.Runtime.GetPropertiesRequest): Promise<Crdp.Runtime.GetPropertiesResponse> {\n        return this.chrome.Runtime.getProperties(params)\n            .catch(err => {\n                if (err.message.startsWith('Cannot find context with specified id')) {\n                    // Hack to ignore this error until we fix https://github.com/Microsoft/vscode/issues/18001 to not request variables at unexpected times.\n                    return null;\n                } else {\n                    throw err;\n                }\n            });\n    }\n\n    private internalPropertyDescriptorToVariable(propDesc: Crdp.Runtime.InternalPropertyDescriptor, parentEvaluateName: string): Promise<DebugProtocol.Variable> {\n        return this.remoteObjectToVariable(propDesc.name, propDesc.value, parentEvaluateName);\n    }\n\n    private getFilteredVariablesForObject(objectId: string, evaluateName: string, filter: string, start: number, count: number): Promise<DebugProtocol.Variable[]> {\n        // No ES6, in case we talk to an old runtime\n        const getIndexedVariablesFn = `\n            function getIndexedVariables(start, count) {\n                var result = [];\n                for (var i = start; i < (start + count); i++) result[i] = this[i];\n                return result;\n            }`;\n        // TODO order??\n        const getNamedVariablesFn = `\n            function getNamedVariablesFn(start, count) {\n                var result = [];\n                var ownProps = Object.getOwnPropertyNames(this);\n                for (var i = start; i < (start + count); i++) result[i] = ownProps[i];\n                return result;\n            }`;\n\n        const getVarsFn = filter === 'indexed' ? getIndexedVariablesFn : getNamedVariablesFn;\n        return this.getFilteredVariablesForObjectId(objectId, evaluateName, getVarsFn, filter, start, count);\n    }\n\n    private getFilteredVariablesForObjectId(objectId: string, evaluateName: string, getVarsFn: string, filter: string, start: number, count: number): Promise<DebugProtocol.Variable[]> {\n        return this.chrome.Runtime.callFunctionOn({\n            objectId,\n            functionDeclaration: getVarsFn,\n            arguments: [{ value: start }, { value: count }],\n            silent: true\n        }).then<DebugProtocol.Variable[]>(evalResponse => {\n            if (evalResponse.exceptionDetails) {\n                const errMsg = ChromeUtils.errorMessageFromExceptionDetails(evalResponse.exceptionDetails);\n                return Promise.reject(errors.errorFromEvaluate(errMsg));\n            } else {\n                // The eval was successful and returned a reference to the array object. Get the props, then filter\n                // out everything except the index names.\n                return this.getVariablesForObjectId(evalResponse.result.objectId, evaluateName, filter)\n                    .then(variables => variables.filter(variable => isIndexedPropName(variable.name)));\n            }\n        },\n        error => Promise.reject(errors.errorFromEvaluate(error.message)));\n    }\n\n    public source(args: DebugProtocol.SourceArguments): Promise<ISourceResponseBody> {\n        let scriptId: Crdp.Runtime.ScriptId;\n        if (args.sourceReference) {\n            const handle = this._sourceHandles.get(args.sourceReference);\n            if (!handle) {\n                return Promise.reject(errors.sourceRequestIllegalHandle());\n            }\n\n            // Have inlined content?\n            if (handle.contents) {\n                return Promise.resolve({\n                    content: handle.contents\n                });\n            }\n\n            scriptId = handle.scriptId;\n        } else if (args.source && args.source.path) {\n            const realPath = this.displayPathToRealPath(args.source.path);\n\n            // Request url has chars unescaped, but they will be escaped in scriptsByUrl\n            const script = this.getScriptByUrl(\n                utils.isURL(realPath) ?\n                    encodeURI(realPath) :\n                    realPath);\n\n            if (!script) {\n                return Promise.reject(errors.sourceRequestCouldNotRetrieveContent());\n            }\n\n            scriptId = script.scriptId;\n        }\n\n        if (!scriptId) {\n            return Promise.reject(errors.sourceRequestCouldNotRetrieveContent());\n        }\n\n        // If not, should have scriptId\n        return this.chrome.Debugger.getScriptSource({ scriptId }).then(response => {\n            return {\n                content: response.scriptSource,\n                mimeType: 'text/javascript'\n            };\n        });\n    }\n\n    public threads(): IThreadsResponseBody {\n        return {\n            threads: [\n                {\n                    id: ChromeDebugAdapter.THREAD_ID,\n                    name: this.threadName()\n                }\n            ]\n        };\n    }\n\n    protected threadName(): string {\n        return 'Thread ' + ChromeDebugAdapter.THREAD_ID;\n    }\n\n    public async evaluate(args: DebugProtocol.EvaluateArguments): Promise<IEvaluateResponseBody> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        if (args.expression.startsWith(ChromeDebugAdapter.SCRIPTS_COMMAND)) {\n            return this.handleScriptsCommand(args);\n        }\n\n        if (args.expression.startsWith('{') && args.expression.endsWith('}')) {\n            args.expression = `(${args.expression})`;\n        }\n\n        const evalResponse = await this.waitThenDoEvaluate(args.expression, args.frameId, { generatePreview: true });\n\n        // Convert to a Variable object then just copy the relevant fields off\n        const variable = await this.remoteObjectToVariable('', evalResponse.result, /*parentEvaluateName=*/undefined, /*stringify=*/undefined, <VariableContext>args.context);\n        if (evalResponse.exceptionDetails) {\n            let resultValue = variable.value;\n            if (resultValue && (resultValue.startsWith('ReferenceError: ') || resultValue.startsWith('TypeError: ')) && args.context !== 'repl') {\n                resultValue = errors.evalNotAvailableMsg;\n            }\n\n            return utils.errP(resultValue);\n        }\n\n        return <IEvaluateResponseBody>{\n            result: variable.value,\n            variablesReference: variable.variablesReference,\n            indexedVariables: variable.indexedVariables,\n            namedVariables: variable.namedVariables,\n            type: variable.type\n        };\n    }\n\n    /**\n     * Handle the .scripts command, which can be used as `.scripts` to return a list of all script details,\n     * or `.scripts <url>` to show the contents of the given script.\n     */\n    private handleScriptsCommand(args: DebugProtocol.EvaluateArguments): Promise<IEvaluateResponseBody> {\n        let outputStringP: Promise<string>;\n        const scriptsRest = utils.lstrip(args.expression, ChromeDebugAdapter.SCRIPTS_COMMAND).trim();\n        if (scriptsRest) {\n            // `.scripts <url>` was used, look up the script by url\n            const requestedScript = this.getScriptByUrl(scriptsRest);\n            if (requestedScript) {\n                outputStringP = this.chrome.Debugger.getScriptSource({ scriptId: requestedScript.scriptId })\n                    .then(result => {\n                        const maxLength = 1e5;\n                        return result.scriptSource.length > maxLength ?\n                            result.scriptSource.substr(0, maxLength) + '[⋯]' :\n                            result.scriptSource;\n                    });\n            } else {\n                outputStringP = Promise.resolve(`No runtime script with url: ${scriptsRest}\\n`);\n            }\n        } else {\n            outputStringP = this.getAllScriptsString();\n        }\n\n        return outputStringP.then(scriptsStr => {\n            this._session.sendEvent(new OutputEvent(scriptsStr));\n            return <IEvaluateResponseBody>{\n                result: '',\n                variablesReference: 0\n            };\n        });\n    }\n\n    private getAllScriptsString(): Promise<string> {\n        const runtimeScripts = Array.from(this._scriptsByUrl.keys())\n            .sort();\n        return Promise.all(runtimeScripts.map(script => this.getOneScriptString(script))).then(strs => {\n            return strs.join('\\n');\n        });\n    }\n\n    private getOneScriptString(runtimeScriptPath: string): Promise<string> {\n        let result = '› ' + runtimeScriptPath;\n        const clientPath = this._pathTransformer.getClientPathFromTargetPath(runtimeScriptPath);\n        if (clientPath && clientPath !== runtimeScriptPath) result += ` (${clientPath})`;\n\n        return this._sourceMapTransformer.allSourcePathDetails(clientPath || runtimeScriptPath).then(sourcePathDetails => {\n            let mappedSourcesStr = sourcePathDetails.map(details => `    - ${details.originalPath} (${details.inferredPath})`).join('\\n');\n            if (sourcePathDetails.length) mappedSourcesStr = '\\n' + mappedSourcesStr;\n\n            return result + mappedSourcesStr;\n        });\n    }\n\n    /**\n     * Allow consumers to override just because of https://github.com/nodejs/node/issues/8426\n     */\n    protected globalEvaluate(args: Crdp.Runtime.EvaluateRequest): Promise<Crdp.Runtime.EvaluateResponse> {\n        return this.chrome.Runtime.evaluate(args);\n    }\n\n    private async waitThenDoEvaluate(expression: string, frameId?: number, extraArgs?: utils.Partial<Crdp.Runtime.EvaluateRequest>): Promise<Crdp.Debugger.EvaluateOnCallFrameResponse | Crdp.Runtime.EvaluateResponse> {\n        const waitThenEval = this._waitAfterStep.then(() => this.doEvaluate(expression, frameId, extraArgs));\n        this._waitAfterStep = waitThenEval.then(() => { }, () => { }); // to Promise<void> and handle failed evals\n        return waitThenEval;\n    }\n\n    private async doEvaluate(expression: string, frameId?: number, extraArgs?: utils.Partial<Crdp.Runtime.EvaluateRequest>): Promise<Crdp.Debugger.EvaluateOnCallFrameResponse | Crdp.Runtime.EvaluateResponse> {\n        if (typeof frameId === 'number') {\n            const frame = this._frameHandles.get(frameId);\n            if (!frame || !frame.callFrameId) {\n                return utils.errP(errors.evalNotAvailableMsg);\n            }\n\n            const callFrameId = frame.callFrameId;\n            let args: Crdp.Debugger.EvaluateOnCallFrameRequest = {\n                callFrameId,\n                expression,\n                // silent because of an issue where node will sometimes hang when breaking on exceptions in console messages. Fixed somewhere between 8 and 8.4\n                silent: true,\n                includeCommandLineAPI: true,\n                objectGroup: 'console'\n            };\n            if (extraArgs) {\n                args = Object.assign(args, extraArgs);\n            }\n\n            return this.chrome.Debugger.evaluateOnCallFrame(args);\n        } else {\n            let args: Crdp.Runtime.EvaluateRequest = {\n                expression,\n                // silent because of an issue where node will sometimes hang when breaking on exceptions in console messages. Fixed somewhere between 8 and 8.4\n                silent: true,\n                includeCommandLineAPI: true,\n                objectGroup: 'console',\n                userGesture: true\n            };\n            if (extraArgs) {\n                args = Object.assign(args, extraArgs);\n            }\n\n            return this.globalEvaluate(args);\n        }\n    }\n\n    public setVariable(args: DebugProtocol.SetVariableArguments): Promise<ISetVariableResponseBody> {\n        const handle = this._variableHandles.get(args.variablesReference);\n        if (!handle) {\n            return Promise.reject(errors.setValueNotSupported());\n        }\n\n        return handle.setValue(this, args.name, args.value)\n            .then(value => ({ value }));\n    }\n\n    public setVariableValue(callFrameId: string, scopeNumber: number, variableName: string, value: string): Promise<string> {\n        let evalResultObject: Crdp.Runtime.RemoteObject;\n        return this.chrome.Debugger.evaluateOnCallFrame({ callFrameId, expression: value, silent: true }).then(evalResponse => {\n            if (evalResponse.exceptionDetails) {\n                const errMsg = ChromeUtils.errorMessageFromExceptionDetails(evalResponse.exceptionDetails);\n                return Promise.reject(errors.errorFromEvaluate(errMsg));\n            } else {\n                evalResultObject = evalResponse.result;\n                const newValue = ChromeUtils.remoteObjectToCallArgument(evalResultObject);\n                return this.chrome.Debugger.setVariableValue({ callFrameId, scopeNumber, variableName, newValue });\n            }\n        },\n        error => Promise.reject(errors.errorFromEvaluate(error.message)))\n        // Temporary, Microsoft/vscode#12019\n        .then(setVarResponse => ChromeUtils.remoteObjectToValue(evalResultObject).value);\n    }\n\n    public setPropertyValue(objectId: string, propName: string, value: string): Promise<string> {\n        const setPropertyValueFn = `function() { return this[\"${propName}\"] = ${value} }`;\n        return this.chrome.Runtime.callFunctionOn({\n            objectId, functionDeclaration: setPropertyValueFn,\n            silent: true\n        }).then(response => {\n            if (response.exceptionDetails) {\n                const errMsg = ChromeUtils.errorMessageFromExceptionDetails(response.exceptionDetails);\n                return Promise.reject<string>(errors.errorFromEvaluate(errMsg));\n            } else {\n                // Temporary, Microsoft/vscode#12019\n                return ChromeUtils.remoteObjectToValue(response.result).value;\n            }\n        },\n        error => Promise.reject<string>(errors.errorFromEvaluate(error.message)));\n    }\n\n    public remoteObjectToVariable(name: string, object: Crdp.Runtime.RemoteObject, parentEvaluateName?: string, stringify = true, context: VariableContext = 'variables'): Promise<DebugProtocol.Variable> {\n        name = name || '\"\"';\n\n        if (object) {\n            if (object.type === 'object') {\n                return this.createObjectVariable(name, object, parentEvaluateName, context);\n            } else if (object.type === 'function') {\n                return Promise.resolve(this.createFunctionVariable(name, object, context, parentEvaluateName));\n            } else {\n                return Promise.resolve(this.createPrimitiveVariable(name, object, parentEvaluateName, stringify));\n            }\n        } else {\n            return Promise.resolve(this.createPrimitiveVariableWithValue(name, '', parentEvaluateName));\n        }\n    }\n\n    public createFunctionVariable(name: string, object: Crdp.Runtime.RemoteObject, context: VariableContext, parentEvaluateName?: string): DebugProtocol.Variable {\n        let value: string;\n        const firstBraceIdx = object.description.indexOf('{');\n        if (firstBraceIdx >= 0) {\n            value = object.description.substring(0, firstBraceIdx) + '{ … }';\n        } else {\n            const firstArrowIdx = object.description.indexOf('=>');\n            value = firstArrowIdx >= 0 ?\n                object.description.substring(0, firstArrowIdx + 2) + ' …' :\n                object.description;\n        }\n\n        const evaluateName = ChromeUtils.getEvaluateName(parentEvaluateName, name);\n        return <DebugProtocol.Variable>{\n            name,\n            value,\n            type: utils.uppercaseFirstLetter(object.type),\n            variablesReference: this._variableHandles.create(new PropertyContainer(object.objectId, evaluateName), context),\n            evaluateName\n        };\n    }\n\n    public createObjectVariable(name: string, object: Crdp.Runtime.RemoteObject, parentEvaluateName: string, context: VariableContext): Promise<DebugProtocol.Variable> {\n        if ((<string>object.subtype) === 'internal#location') {\n            // Could format this nicely later, see #110\n            return Promise.resolve(this.createPrimitiveVariableWithValue(name, 'internal#location', parentEvaluateName));\n        } else if (object.subtype === 'null') {\n            return Promise.resolve(this.createPrimitiveVariableWithValue(name, 'null', parentEvaluateName));\n        }\n\n        const value = variables.getRemoteObjectPreview_object(object, context);\n        let propCountP: Promise<IPropCount>;\n        if (object.subtype === 'array' || object.subtype === 'typedarray') {\n            if (object.preview && !object.preview.overflow) {\n                propCountP = Promise.resolve(this.getArrayNumPropsByPreview(object));\n            } else if (object.className === 'Buffer') {\n                propCountP = this.getBufferNumPropsByEval(object.objectId);\n            } else {\n                propCountP = this.getArrayNumPropsByEval(object.objectId);\n            }\n        } else if (object.subtype === 'set' || object.subtype === 'map') {\n            if (object.preview && !object.preview.overflow) {\n                propCountP = Promise.resolve(this.getCollectionNumPropsByPreview(object));\n            } else {\n                propCountP = this.getCollectionNumPropsByEval(object.objectId);\n            }\n        } else {\n            propCountP = Promise.resolve({\n                indexedVariables: undefined,\n                namedVariables: undefined\n             });\n        }\n\n        const evaluateName = ChromeUtils.getEvaluateName(parentEvaluateName, name);\n        const variablesReference = this._variableHandles.create(this.createPropertyContainer(object, evaluateName), context);\n        return propCountP.then(({ indexedVariables, namedVariables }) => (<DebugProtocol.Variable>{\n            name,\n            value,\n            type: utils.uppercaseFirstLetter(object.type),\n            variablesReference,\n            indexedVariables,\n            namedVariables,\n            evaluateName\n        }));\n    }\n\n    protected createPropertyContainer(object: Crdp.Runtime.RemoteObject, evaluateName: string): IVariableContainer {\n        return new PropertyContainer(object.objectId, evaluateName);\n    }\n\n    public createPrimitiveVariable(name: string, object: Crdp.Runtime.RemoteObject, parentEvaluateName?: string, stringify?: boolean): DebugProtocol.Variable {\n        const value = variables.getRemoteObjectPreview_primitive(object, stringify);\n        const variable = this.createPrimitiveVariableWithValue(name, value, parentEvaluateName);\n        variable.type = object.type;\n\n        return variable;\n    }\n\n    public createPrimitiveVariableWithValue(name: string, value: string, parentEvaluateName?: string): DebugProtocol.Variable {\n        return {\n            name,\n            value,\n            variablesReference: 0,\n            evaluateName: ChromeUtils.getEvaluateName(parentEvaluateName, name)\n        };\n    }\n\n    public async restartFrame(args: DebugProtocol.RestartFrameArguments): Promise<void> {\n        const callFrame = this._frameHandles.get(args.frameId);\n        if (!callFrame || !callFrame.callFrameId) {\n            return utils.errP(errors.noRestartFrame);\n        }\n\n        await this.chrome.Debugger.restartFrame({ callFrameId: callFrame.callFrameId });\n        this._expectingStopReason = 'frame_entry';\n        return this.chrome.Debugger.stepInto({ });\n    }\n\n    public async completions(args: DebugProtocol.CompletionsArguments): Promise<ICompletionsResponseBody> {\n        const text = args.text;\n        const column = args.column;\n\n        // 1-indexed column\n        const prefix = text.substring(0, column - 1);\n\n        let expression: string;\n        const dot = prefix.lastIndexOf('.');\n        if (dot >= 0) {\n            expression = prefix.substr(0, dot);\n        }\n\n        if (expression) {\n            logger.verbose(`Completions: Returning for expression '${expression}'`);\n            const getCompletionsFn = `(function(x){var a=[];for(var o=x;o!==null&&typeof o !== 'undefined';o=o.__proto__){a.push(Object.getOwnPropertyNames(o))};return a})(${expression})`;\n            const response = await this.waitThenDoEvaluate(getCompletionsFn, args.frameId, { returnByValue: true });\n            if (response.exceptionDetails) {\n                return { targets: [] };\n            } else {\n                return { targets: this.getFlatAndUniqueCompletionItems(response.result.value) };\n            }\n        } else {\n            logger.verbose(`Completions: Returning global completions`);\n\n            // If no expression was passed, we must be getting global completions at a breakpoint\n            if (typeof args.frameId !== 'number' || !this._frameHandles.get(args.frameId)) {\n                return Promise.reject(errors.stackFrameNotValid());\n            }\n\n            const callFrame = this._frameHandles.get(args.frameId);\n            if (!callFrame || !callFrame.callFrameId) {\n                // Async frame or label\n                return { targets: [] };\n            }\n\n            const scopeExpandPs = callFrame.scopeChain\n                .map(scope => new ScopeContainer(callFrame.callFrameId, undefined, scope.object.objectId).expand(this));\n            return Promise.all(scopeExpandPs)\n                .then((variableArrs: DebugProtocol.Variable[][]) => {\n                    const targets = this.getFlatAndUniqueCompletionItems(\n                        variableArrs.map(variableArr => variableArr.map(variable => variable.name)));\n                    return { targets };\n                });\n        }\n    }\n\n    private getFlatAndUniqueCompletionItems(arrays: string[][]): DebugProtocol.CompletionItem[] {\n        const set = new Set<string>();\n        const items: DebugProtocol.CompletionItem[] = [];\n\n        for (let i = 0; i < arrays.length; i++) {\n            for (let name of arrays[i]) {\n                if (!isIndexedPropName(name) && !set.has(name)) {\n                    set.add(name);\n                    items.push({\n                        label: <string>name,\n                        type: 'property'\n                    });\n                }\n            }\n        }\n\n        return items;\n    }\n\n    private getArrayNumPropsByEval(objectId: string): Promise<IPropCount> {\n        // +2 for __proto__ and length\n        const getNumPropsFn = `function() { return [this.length, Object.keys(this).length - this.length + 2]; }`;\n        return this.getNumPropsByEval(objectId, getNumPropsFn);\n    }\n\n    private getBufferNumPropsByEval(objectId: string): Promise<IPropCount> {\n        // +2 for __proto__ and length\n        // Object.keys doesn't return other props from a Buffer\n        const getNumPropsFn = `function() { return [this.length, 0]; }`;\n        return this.getNumPropsByEval(objectId, getNumPropsFn);\n    }\n\n    private getArrayNumPropsByPreview(object: Crdp.Runtime.RemoteObject): IPropCount {\n        let indexedVariables = 0;\n        const indexedProps = object.preview.properties\n            .filter(prop => isIndexedPropName(prop.name));\n        if (indexedProps.length) {\n            // +1 because (last index=0) => 1 prop\n            indexedVariables = parseInt(indexedProps[indexedProps.length - 1].name, 10) + 1;\n        }\n\n        const namedVariables = object.preview.properties.length - indexedProps.length + 2; // 2 for __proto__ and length\n        return { indexedVariables, namedVariables };\n    }\n\n    private getCollectionNumPropsByEval(objectId: string): Promise<IPropCount> {\n        const getNumPropsFn = `function() { return [0, Object.keys(this).length + 1]; }`; // +1 for [[Entries]];\n        return this.getNumPropsByEval(objectId, getNumPropsFn);\n    }\n\n    private getCollectionNumPropsByPreview(object: Crdp.Runtime.RemoteObject): IPropCount {\n        let indexedVariables = 0;\n        let namedVariables = object.preview.properties.length + 1; // +1 for [[Entries]];\n\n        return { indexedVariables, namedVariables };\n    }\n\n    private getNumPropsByEval(objectId: string, getNumPropsFn: string): Promise<IPropCount> {\n        return this.chrome.Runtime.callFunctionOn({\n            objectId,\n            functionDeclaration: getNumPropsFn,\n            silent: true,\n            returnByValue: true\n        }).then(response => {\n            if (response.exceptionDetails) {\n                const errMsg = ChromeUtils.errorMessageFromExceptionDetails(response.exceptionDetails);\n                return Promise.reject<IPropCount>(errors.errorFromEvaluate(errMsg));\n            } else {\n                const resultProps = response.result.value;\n                if (resultProps.length !== 2) {\n                    return Promise.reject<IPropCount>(errors.errorFromEvaluate('Did not get expected props, got ' + JSON.stringify(resultProps)));\n                }\n\n                return { indexedVariables: resultProps[0], namedVariables: resultProps[1] };\n            }\n        },\n        error => Promise.reject<IPropCount>(errors.errorFromEvaluate(error.message)));\n    }\n\n    private fakeUrlForSourceReference(sourceReference: number): string {\n        const handle = this._sourceHandles.get(sourceReference);\n        return `${ChromeDebugAdapter.EVAL_NAME_PREFIX}${handle.scriptId}`;\n    }\n\n    private displayNameForSourceReference(sourceReference: number): string {\n        const handle = this._sourceHandles.get(sourceReference);\n        return (handle && this.displayNameForScriptId(handle.scriptId)) || sourceReference + '';\n    }\n\n    private displayNameForScriptId(scriptId: number|string): string {\n        return `${ChromeDebugAdapter.EVAL_NAME_PREFIX}${scriptId}`;\n    }\n\n    private getScriptByUrl(url: string): Crdp.Debugger.ScriptParsedEvent {\n        url = this.fixPathCasing(url);\n        return this._scriptsByUrl.get(url) || this._scriptsByUrl.get(utils.fixDriveLetter(url));\n    }\n\n    public fixPathCasing(str: string): string {\n        return str && (this._caseSensitivePaths ? str : str.toLowerCase());\n    }\n}\n"]}