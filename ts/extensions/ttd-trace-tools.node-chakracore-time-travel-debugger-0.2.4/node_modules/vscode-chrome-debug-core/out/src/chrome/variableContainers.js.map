{"version":3,"sources":["src/chrome/variableContainers.ts"],"names":[],"mappings":";AAAA;;4DAE4D;;;;;;;;;;AAG5D,6DAA8C;AAI9C,kCAAkC;AAClC,6CAA6C;AAC7C,oCAAoC;AAOpC;IACI,YAAsB,kBAAsC,EAAY,QAAgB,EAAY,YAAqB;QAAnG,uBAAkB,GAAlB,kBAAkB,CAAoB;QAAY,aAAQ,GAAR,QAAQ,CAAQ;QAAY,iBAAY,GAAZ,YAAY,CAAS;IACzH,CAAC;IAEM,MAAM,CAAC,MAAe,EAAE,KAAc,EAAE,KAAc;QACzD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACnH,CAAC;IAEM,QAAQ,CAAC,IAAY,EAAE,KAAa;QACvC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;IACtE,CAAC;CACJ;AAXD,sDAWC;AAED,uBAA+B,SAAQ,qBAAqB;IACjD,QAAQ,CAAC,IAAY,EAAE,KAAa;QACvC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7D,CAAC;IAEa,gBAAgB,CAAC,QAAgB,EAAE,QAAgB,EAAE,KAAa;;YAC5E,MAAM,kBAAkB,GAAG,6BAA6B,QAAQ,QAAQ,KAAK,IAAI,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC;gBACzE,QAAQ,EAAE,mBAAmB,EAAE,kBAAkB;gBACjD,MAAM,EAAE,IAAI;aACf,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAE3E,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC5B,MAAM,MAAM,GAAG,WAAW,CAAC,gCAAgC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;gBACvF,MAAM,CAAC,OAAO,CAAC,MAAM,CAAS,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;YACpE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,oCAAoC;gBACpC,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;YAClE,CAAC;QACL,CAAC;KAAA;CAEJ;AAtBD,8CAsBC;AAED,4BAAoC,SAAQ,qBAAqB;IAC7D,YAAY,kBAAsC,EAAU,IAAiC;QACzF,KAAK,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;QADmB,SAAI,GAAJ,IAAI,CAA6B;IAE7F,CAAC;IAEM,MAAM,CAAC,MAAe,EAAE,KAAc,EAAE,KAAc;QACzD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,cAAc,CAAA,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IACvJ,CAAC;CACJ;AARD,wDAQC;AAED,oBAA4B,SAAQ,qBAAqB;IAMrD,YAAmB,OAA2B,EAAE,OAAe,EAAE,cAAsB,EAAE,QAAgB,EAAE,OAAmC,EAAE,WAAuC;QACnL,KAAK,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IAC1C,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,MAAe,EAAE,KAAc,EAAE,KAAc;QACzD,mCAAmC;QACnC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACtD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,yFAAyF;gBACzF,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrE,CAAC;YAED,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAChB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YACjF,CAAC;YAED,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,QAAQ,CAAC,IAAY,EAAE,KAAa;QACvC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IACtG,CAAC;IAEO,kBAAkB,CAAC,SAAmC,EAAE,IAAY,EAAE,GAA8B;QACxG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC7E,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC5B,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA7CD,wCA6CC;AAED,wBAAgC,SAAQ,iBAAiB;IAGrD,YAAsB,OAA2B,EAAE,QAAgB,EAAE,SAAoC;QACrG,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC9C,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,MAAM,CAAC,OAA2B,EAAE,SAAoC;QAClF,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACvB,IAAI,kBAAkB,CAAC,OAAO,EAAE,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;YAChE,IAAI,uBAAuB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IACxD,CAAC;CACJ;AAhBD,gDAgBC;AAED;;GAEG;AACH,6BAAqC,SAAQ,kBAAkB;IAC3D,YAAmB,kBAAsC,EAAE,SAAoC;QAC3F,KAAK,CAAC,kBAAkB,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,MAAe,EAAE,KAAc,EAAE,KAAc;QACzD,MAAM,sBAAsB,GAAyC,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC;QACnH,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,4BAA4B,CAAC,sBAAsB,CAAC;aAC9E,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtC,CAAC;CACJ;AAbD,0DAaC;AAED;IAAA;QACY,qBAAgB,GAAG,IAAI,6BAAO,CAAqB,CAAC,CAAC,CAAC;QACtD,4BAAuB,GAAG,IAAI,6BAAO,CAAqB,GAAG,CAAC,CAAC;IAoB3E,CAAC;IAlBU,QAAQ;QACX,qEAAqE;QACrE,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC;IAEM,MAAM,CAAC,KAAyB,EAAE,UAA2B,WAAW;QAC3E,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAEM,GAAG,CAAC,MAAc;QACrB,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACzF,CAAC;IAEO,UAAU,CAAC,OAAwB;QACvC,MAAM,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC;YACvB,IAAI,CAAC,uBAAuB,CAAC,CAAC;YAC9B,IAAI,CAAC,gBAAgB,CAAC;IAC9B,CAAC;CACJ;AAtBD,0CAsBC","file":"variableContainers.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { DebugProtocol } from 'vscode-debugprotocol';\nimport { Handles } from 'vscode-debugadapter';\n\nimport { ChromeDebugAdapter, VariableContext } from './chromeDebugAdapter';\nimport Crdp from '../../crdp/crdp';\nimport * as utils from '../utils';\nimport * as chromeUtils from './chromeUtils';\nimport * as errors from '../errors';\n\nexport interface IVariableContainer {\n    expand(filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]>;\n    setValue(name: string, value: string): Promise<string>;\n}\n\nexport abstract class BaseVariableContainer implements IVariableContainer {\n    constructor(protected chromeDebugAdapter: ChromeDebugAdapter, protected objectId: string, protected evaluateName?: string) {\n    }\n\n    public expand(filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]> {\n        return this.chromeDebugAdapter.getVariablesForObjectId(this.objectId, this.evaluateName, filter, start, count);\n    }\n\n    public setValue(name: string, value: string): Promise<string> {\n        return utils.errP('setValue not supported by this variable type');\n    }\n}\n\nexport class PropertyContainer extends BaseVariableContainer {\n    public setValue(name: string, value: string): Promise<string> {\n        return this.setPropertyValue(this.objectId, name, value);\n    }\n\n    private async setPropertyValue(objectId: string, propName: string, value: string): Promise<string> {\n        const setPropertyValueFn = `function() { return this[\"${propName}\"] = ${value} }`;\n\n        const response = await this.chromeDebugAdapter.chrome.Runtime.callFunctionOn({\n            objectId, functionDeclaration: setPropertyValueFn,\n            silent: true\n        }).catch(error => Promise.reject(errors.errorFromEvaluate(error.message)));\n\n        if (response.exceptionDetails) {\n            const errMsg = chromeUtils.errorMessageFromExceptionDetails(response.exceptionDetails);\n            return Promise.reject<string>(errors.errorFromEvaluate(errMsg));\n        } else {\n            // Temporary, Microsoft/vscode#12019\n            return chromeUtils.remoteObjectToValue(response.result).value;\n        }\n    }\n\n}\n\nexport class LoggedObjectsContainer extends BaseVariableContainer {\n    constructor(chromeDebugAdapter: ChromeDebugAdapter, private args: Crdp.Runtime.RemoteObject[]) {\n        super(chromeDebugAdapter, undefined);\n    }\n\n    public expand(filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]> {\n        return Promise.all(this.args.map((arg, i) => this.chromeDebugAdapter.remoteObjectToVariable('' + i, arg, undefined, /*stringify=*/false, 'repl')));\n    }\n}\n\nexport class ScopeContainer extends BaseVariableContainer {\n    private _thisObj: Crdp.Runtime.RemoteObject;\n    private _returnValue: Crdp.Runtime.RemoteObject;\n    private _frameId: string;\n    private _origScopeIndex: number;\n\n    public constructor(adapter: ChromeDebugAdapter, frameId: string, origScopeIndex: number, objectId: string, thisObj?: Crdp.Runtime.RemoteObject, returnValue?: Crdp.Runtime.RemoteObject) {\n        super(adapter, objectId, '');\n        this._thisObj = thisObj;\n        this._returnValue = returnValue;\n        this._frameId = frameId;\n        this._origScopeIndex = origScopeIndex;\n    }\n\n    /**\n     * Call super then insert the 'this' object if needed\n     */\n    public expand(filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]> {\n        // No filtering in scopes right now\n        return super.expand('all', start, count).then(variables => {\n            if (this._thisObj) {\n                // If this is a scope that should have the 'this', prop, insert it at the top of the list\n                return this.insertRemoteObject(variables, 'this', this._thisObj);\n            }\n\n            return variables;\n        }).then(variables => {\n            if (this._returnValue) {\n                return this.insertRemoteObject(variables, 'Return value', this._returnValue);\n            }\n\n            return variables;\n        });\n    }\n\n    public setValue(name: string, value: string): Promise<string> {\n        return this.chromeDebugAdapter.setVariableValue(this._frameId, this._origScopeIndex, name, value);\n    }\n\n    private insertRemoteObject(variables: DebugProtocol.Variable[], name: string, obj: Crdp.Runtime.RemoteObject): Promise<DebugProtocol.Variable[]> {\n        return this.chromeDebugAdapter.remoteObjectToVariable(name, obj).then(variable => {\n            variables.unshift(variable);\n            return variables;\n        });\n    }\n}\n\nexport class ExceptionContainer extends PropertyContainer {\n    protected _exception: Crdp.Runtime.RemoteObject;\n\n    protected constructor(adapter: ChromeDebugAdapter, objectId: string, exception: Crdp.Runtime.RemoteObject) {\n        super(adapter, exception.objectId, undefined);\n        this._exception = exception;\n    }\n\n    /**\n     * Expand the exception as if it were a Scope\n     */\n    public static create(adapter: ChromeDebugAdapter, exception: Crdp.Runtime.RemoteObject): ExceptionContainer {\n        return exception.objectId ?\n            new ExceptionContainer(adapter, exception.objectId, exception) :\n            new ExceptionValueContainer(adapter, exception);\n    }\n}\n\n/**\n * For when a value is thrown instead of an object\n */\nexport class ExceptionValueContainer extends ExceptionContainer {\n    public constructor(chromeDebugAdapter: ChromeDebugAdapter, exception: Crdp.Runtime.RemoteObject) {\n        super(chromeDebugAdapter, 'EXCEPTION_ID', exception);\n    }\n\n    /**\n     * Make up a fake 'Exception' property to hold the thrown value, displayed under the Exception Scope\n     */\n    public expand(filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]> {\n        const excValuePropDescriptor: Crdp.Runtime.PropertyDescriptor = <any>{ name: 'Exception', value: this._exception };\n        return this.chromeDebugAdapter.propertyDescriptorToVariable(excValuePropDescriptor)\n            .then(variable => [variable]);\n    }\n}\n\nexport class VariableHandles {\n    private _variableHandles = new Handles<IVariableContainer>(1);\n    private _consoleVariableHandles = new Handles<IVariableContainer>(1e5);\n\n    public onPaused(): void {\n        // Only reset the variableHandles, the console vars are still visible\n        this._variableHandles.reset();\n    }\n\n    public create(value: IVariableContainer, context: VariableContext = 'variables'): number {\n        return this.getHandles(context).create(value);\n    }\n\n    public get(handle: number): IVariableContainer {\n        return this._variableHandles.get(handle) || this._consoleVariableHandles.get(handle);\n    }\n\n    private getHandles(context: VariableContext): Handles<IVariableContainer> {\n        return context === 'repl' ?\n            this._consoleVariableHandles :\n            this._variableHandles;\n    }\n}\n"],"sourceRoot":"../../.."}